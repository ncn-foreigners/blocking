[{"path":"https://ncn-foreigners.github.io/blocking/articles/v1-deduplication.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Blocking records for deduplication","text":"Read required packages Read RLdata500 data used RecordLinkage package dblink Github repository. dataset contains 500 450 entities.","code":"library(blocking) library(reclin2) library(data.table) df <- read.csv(\"https://raw.githubusercontent.com/cleanzr/dblink/dc3dd0daf55f8a303863423817a0f0042b3c275a/examples/RLdata500.csv\") setDT(df) head(df) #>    fname_c1 fname_c2 lname_c1 lname_c2    by    bm    bd rec_id ent_id #>      <char>   <char>   <char>   <char> <int> <int> <int>  <int>  <int> #> 1:  CARSTEN     <NA>    MEIER     <NA>  1949     7    22      1     34 #> 2:     GERD     <NA>    BAUER     <NA>  1968     7    27      2     51 #> 3:   ROBERT     <NA> HARTMANN     <NA>  1930     4    30      3    115 #> 4:   STEFAN     <NA>    WOLFF     <NA>  1957     9     2      4    189 #> 5:     RALF     <NA>  KRUEGER     <NA>  1966     1    13      5     72 #> 6:  JUERGEN     <NA>   FRANKE     <NA>  1929     7     4      6    142"},{"path":"https://ncn-foreigners.github.io/blocking/articles/v1-deduplication.html","id":"blocking-for-deduplication","dir":"Articles","previous_headings":"","what":"Blocking for deduplication","title":"Blocking records for deduplication","text":"Now create new column concatenates information row. next step use newly created column blocking function. specify verbose, get information progress. Results follows: based rnndescent created 154 blocks, based 429 columns (2 character shingles), 93 blocks 2 elements, 38 blocks 3 elements, …, 3 block 6 elements. Structure object follows: result - data.table identifiers block IDs, method - method used, deduplication – whether deduplication applied, metrics - standard metrics based igraph::compare methods comparing graphs (NULL), colnames - column names used comparison, graph – igraph object mainly visualisation. Plot connections  resulting data.table three columns: x – reference dataset (.e. df) – may contain units df, y - query (row df) – may contain units df, block – block ID, dist – distance objects. Create long data.table information blocks units original dataset. add block information final dataset. can check many blocks entities (ent_id) observed. example, entities blocks. can visualise distances units stored df_blocks$result data set. Clearly mixture two groups: matches (close 0) non-matches (close 1).  Finally, can visualise result based information whether block contains matches .","code":"df[, id_count :=.N, ent_id] ## how many times given unit occurs df[is.na(fname_c2), fname_c2:=\"\"] df[is.na(lname_c2), lname_c2:=\"\"] df[, bm:=sprintf(\"%02d\", bm)] ## add leading zeros to month df[, bd:=sprintf(\"%02d\", bd)] ## add leading zeros to month df[, txt:=tolower(paste0(fname_c1,fname_c2,lname_c1,lname_c2,by,bm,bd))] head(df) #>    fname_c1 fname_c2 lname_c1 lname_c2    by     bm     bd rec_id ent_id #>      <char>   <char>   <char>   <char> <int> <char> <char>  <int>  <int> #> 1:  CARSTEN             MEIER           1949     07     22      1     34 #> 2:     GERD             BAUER           1968     07     27      2     51 #> 3:   ROBERT          HARTMANN           1930     04     30      3    115 #> 4:   STEFAN             WOLFF           1957     09     02      4    189 #> 5:     RALF           KRUEGER           1966     01     13      5     72 #> 6:  JUERGEN            FRANKE           1929     07     04      6    142 #>    id_count                    txt #>       <int>                 <char> #> 1:        1   carstenmeier19490722 #> 2:        2      gerdbauer19680727 #> 3:        1 roberthartmann19300430 #> 4:        1    stefanwolff19570902 #> 5:        1    ralfkrueger19660113 #> 6:        1  juergenfranke19290704 df_blocks <- blocking(x = df$txt, ann = \"nnd\", verbose = 1, graph = TRUE, seed = 2024) #> ===== creating tokens ===== #> ===== starting search (nnd, x, y: 500, 500, t: 429) ===== #> ===== creating graph ===== df_blocks #> ======================================================== #> Blocking based on the nnd method. #> Number of blocks: 154. #> Number of columns used for blocking: 429. #> Reduction ratio: 0.9951. #> ======================================================== #> Distribution of the size of the blocks: #>  2  3  4  5  6  #> 91 37 17  6  3 str(df_blocks,1) #> List of 6 #>  $ result       :Classes 'data.table' and 'data.frame':  255 obs. of  4 variables: #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ method       : chr \"nnd\" #>  $ deduplication: logi TRUE #>  $ metrics      : NULL #>  $ colnames     : chr [1:429] \"86\" \"ap\" \"av\" \"bf\" ... #>  $ graph        :Class 'igraph'  hidden list of 10 #>  - attr(*, \"class\")= chr \"blocking\" plot(df_blocks$graph, vertex.size=1, vertex.label = NA) head(df_blocks$result) #>        x     y block       dist #>    <int> <int> <num>      <num> #> 1:     2    43     4 0.08074532 #> 2:     2   486     4 0.41023218 #> 3:     5   128    24 0.51333577 #> 4:     5   439    24 0.51333577 #> 5:     7    20     1 0.27246721 #> 6:     7    28     1 0.45405132 df_block_melted <- melt(df_blocks$result, id.vars = c(\"block\", \"dist\")) df_block_melted_rec_block <- unique(df_block_melted[, .(rec_id=value, block)]) head(df_block_melted_rec_block) #>    rec_id block #>     <int> <num> #> 1:      2     4 #> 2:      5    24 #> 3:      7     1 #> 4:      9    64 #> 5:     10    50 #> 6:     11   107 df[df_block_melted_rec_block, on = \"rec_id\", block_id := i.block] head(df) #>    fname_c1 fname_c2 lname_c1 lname_c2    by     bm     bd rec_id ent_id #>      <char>   <char>   <char>   <char> <int> <char> <char>  <int>  <int> #> 1:  CARSTEN             MEIER           1949     07     22      1     34 #> 2:     GERD             BAUER           1968     07     27      2     51 #> 3:   ROBERT          HARTMANN           1930     04     30      3    115 #> 4:   STEFAN             WOLFF           1957     09     02      4    189 #> 5:     RALF           KRUEGER           1966     01     13      5     72 #> 6:  JUERGEN            FRANKE           1929     07     04      6    142 #>    id_count                    txt block_id #>       <int>                 <char>    <num> #> 1:        1   carstenmeier19490722       NA #> 2:        2      gerdbauer19680727        4 #> 3:        1 roberthartmann19300430       NA #> 4:        1    stefanwolff19570902       NA #> 5:        1    ralfkrueger19660113       24 #> 6:        1  juergenfranke19290704       NA df[, .(uniq_blocks = uniqueN(block_id)), .(ent_id)][, .N, uniq_blocks] #>    uniq_blocks     N #>          <int> <int> #> 1:           1   450 hist(df_blocks$result$dist, xlab = \"Distances\", ylab = \"Frequency\", breaks = \"fd\",      main = \"Distances calculated between units\") df_for_density <- copy(df_block_melted[block %in% df$block_id]) df_for_density[, match:= block %in% df[id_count == 2]$block_id]  plot(density(df_for_density[match==FALSE]$dist), col = \"blue\", xlim = c(0, 0.8),       main = \"Distribution of distances between\\nclusters type (match=red, non-match=blue)\") lines(density(df_for_density[match==TRUE]$dist), col = \"red\", xlim = c(0, 0.8))"},{"path":"https://ncn-foreigners.github.io/blocking/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maciej Beręsewicz. Author, maintainer.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beręsewicz M (2024). blocking: Blocking records record linkage / entity resolution. R package version 0.1.0, https://ncn-foreigners.github.io/blocking/, https://github.com/ncn-foreigners/blocking.","code":"@Manual{,   title = {blocking: Blocking records for record linkage / entity resolution},   author = {Maciej Beręsewicz},   year = {2024},   note = {R package version 0.1.0, https://ncn-foreigners.github.io/blocking/},   url = {https://github.com/ncn-foreigners/blocking}, }"},{"path":[]},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Blocking records for record linkage / entity resolution","text":"R package aims block records data deduplication record linkage (.k.. entity resolution) based approximate nearest neighbours algorithms (ANN) graphs (via igraph package). Currently supports following R packages binds specific ANN algorithms: rnndescent (default, powerful, supports sparse matrices), RcppHNSW (powerful support sparse matrices), RcppAnnoy, mlpack (see mlpack::lsh mlpack::knn). package also supports integration reclin2 package via blocking::pair_ann function.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Blocking records for record linkage / entity resolution","text":"Work package supported National Science Centre, OPUS 22 grant . 2020/39/B/HS4/00941.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Blocking records for record linkage / entity resolution","text":"can install development version blocking package GitHub :","code":"# install.packages(\"remotes\") # uncomment if needed remotes::install_github(\"ncn-foreigners/blocking\")"},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Blocking records for record linkage / entity resolution","text":"Load packages examples Generate simple data two groups (df_example) reference data (df_base). Deduplication using blocking function. Output contains information : + method used (nnd refers NN descent algorithm), + number blocks created (2 blocks), + number columns used blocking, .e. many shingles created text2vec package (28), + reduction ratio, .e. large reduction comparison pairs (0.5714 means blocking reduces comparison 57%). Table blocking contains: row numbers original data block number (integers), distance (ANN algorithm). Deduplication using pair_ann function integration reclin2 package. use pipeline can used reclin2 package. Record linkage using function df_base “register” df_example reference (query data).","code":"library(blocking) library(reclin2) #> Loading required package: data.table #>  #> Attaching package: 'reclin2' #> The following object is masked from 'package:base': #>  #>     identical df_example <- data.frame(txt = c(   \"jankowalski\",   \"kowalskijan\",   \"kowalskimjan\",   \"kowaljan\",   \"montypython\",   \"pythonmonty\",   \"cyrkmontypython\",   \"monty\" )) df_base <- data.frame(txt = c(\"montypython\", \"kowalskijan\"))  df_example #>               txt #> 1     jankowalski #> 2     kowalskijan #> 3    kowalskimjan #> 4        kowaljan #> 5     montypython #> 6     pythonmonty #> 7 cyrkmontypython #> 8           monty  df_base #>           txt #> 1 montypython #> 2 kowalskijan blocking_result <- blocking(x = df_example$txt) ## data frame with indices and block  blocking_result #> ======================================================== #> Blocking based on the nnd method. #> Number of blocks: 2. #> Number of columns used for blocking: 28. #> Reduction ratio: 0.5714. #> ======================================================== #> Distribution of the size of the blocks: #> 4  #> 2 blocking_result$result #>        x     y block       dist #>    <int> <int> <num>      <num> #> 1:     1     2     1 0.10000005 #> 2:     1     3     1 0.14188367 #> 3:     1     4     1 0.28286284 #> 4:     2     1     1 0.10000005 #> 5:     5     6     2 0.08333336 #> 6:     5     7     2 0.13397458 #> 7:     5     8     2 0.27831215 #> 8:     6     5     2 0.08333336 pair_ann(x = df_example, on = \"txt\") |>   compare_pairs(on = \"txt\", comparators = list(cmp_jarowinkler())) |>   score_simple(\"score\", on = \"txt\") |>   select_threshold(\"threshold\", score = \"score\", threshold = 0.55) |>   link(selection = \"threshold\") #>   Total number of pairs: 10 pairs #>  #> Key: <.y> #>        .y    .x       txt.x           txt.y #>     <int> <int>      <char>          <char> #>  1:     2     1 jankowalski     kowalskijan #>  2:     3     1 jankowalski    kowalskimjan #>  3:     3     2 kowalskijan    kowalskimjan #>  4:     4     1 jankowalski        kowaljan #>  5:     4     2 kowalskijan        kowaljan #>  6:     6     5 montypython     pythonmonty #>  7:     7     5 montypython cyrkmontypython #>  8:     7     6 pythonmonty cyrkmontypython #>  9:     8     5 montypython           monty #> 10:     8     6 pythonmonty           monty pair_ann(x = df_base, y = df_example, on = \"txt\", deduplication = FALSE) |>   compare_pairs(on = \"txt\", comparators = list(cmp_jarowinkler())) |>   score_simple(\"score\", on = \"txt\") |>   select_threshold(\"threshold\", score = \"score\", threshold = 0.55) |>   link(selection = \"threshold\") #>   Total number of pairs: 8 pairs #>  #> Key: <.y> #>       .y    .x       txt.x           txt.y #>    <int> <int>      <char>          <char> #> 1:     1     2 kowalskijan     jankowalski #> 2:     2     2 kowalskijan     kowalskijan #> 3:     3     2 kowalskijan    kowalskimjan #> 4:     4     2 kowalskijan        kowaljan #> 5:     5     1 montypython     montypython #> 6:     6     1 montypython     pythonmonty #> 7:     7     1 montypython cyrkmontypython #> 8:     8     1 montypython           monty"},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"see-also","dir":"","previous_headings":"","what":"See also","title":"Blocking records for record linkage / entity resolution","text":"See section Data Integration (Statistical Matching Record Linkage) Official Statistics Task View. Packages allow blocking: klsh – k-means locality sensitive hashing, reclin2 – pair_blocking, pari_minsim functions, fastLink – blockData function. : clevr – evaluation clustering, helper functions. exchanger – bayesian Entity Resolution Exchangeable Random Partition Priors","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function for blocking records given text data — blocking","title":"Main function for blocking records given text data — blocking","text":"Function creates shingles (strings 2 characters, default), applies approximate nearest neighbour (ANN) algorithms via rnndescent, RcppHNSW, RcppAnnoy mlpack packages, creates blocks using graphs via igraph.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function for blocking records given text data — blocking","text":"","code":"blocking(   x,   y = NULL,   deduplication = TRUE,   on = NULL,   on_blocking = NULL,   ann = c(\"nnd\", \"hnsw\", \"annoy\", \"lsh\", \"kd\"),   distance = c(\"cosine\", \"euclidean\", \"l2\", \"ip\", \"manhatan\", \"hamming\", \"angular\"),   ann_write = NULL,   ann_colnames = NULL,   true_blocks = NULL,   verbose = c(0, 1, 2),   graph = FALSE,   seed = 2023,   n_threads = 1,   control_txt = controls_txt(),   control_ann = controls_ann() )"},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function for blocking records given text data — blocking","text":"x reference data (character vector matrix), y query data (character vector matrix), provided NULL default thus deduplication performed, deduplication whether deduplication applied (default TRUE y set NULL), variables ANN search (currently supported), on_blocking variables blocking records ANN search (currently supported), ann algorithm used searching ann (possible, c(\"nnd\", \"hnsw\", \"annoy\", \"lsh\", \"kd\"), default \"nnd\" corresponds nearest neighbour descent method), distance distance metric (default cosine, options possible see details), ann_write writing index file. Two files created: 1) index, 2) text file column names, ann_colnames file column names x y indices saved disk (currently supported), true_blocks matrix true blocks calculate evaluation metrics (standard metrics based confusion matrix well metrics igraph::compare() returned). verbose whether log provided (0 = none, 1 = main, 2 = ANN algorithm verbose used), graph whether graph returned (default FALSE), seed seed algorithms (reproducibility), n_threads number threads used ANN algorithms adding data index query, control_txt list controls text data (passed text2vec::itoken_parallel text2vec::itoken), control_ann list controls ANN algorithms.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function for blocking records given text data — blocking","text":"Returns list containing: result -- data.table indices (rows) x, y, block distance points method -- name ANN algorithm used, metrics -- metrics quality assessment, true_blocks provided, colnames -- variable names (colnames) used search, graph -- igraph class object.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main function for blocking records given text data — blocking","text":"Imports","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Main function for blocking records given text data — blocking","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function for blocking records given text data — blocking","text":"","code":"## an example using RcppHNSW df_example <- data.frame(txt = c(\"jankowalski\", \"kowalskijan\", \"kowalskimjan\", \"kowaljan\", \"montypython\", \"pythonmonty\", \"cyrkmontypython\", \"monty\"))  result <- blocking(x = df_example$txt,                    ann = \"hnsw\",                    control_ann = controls_ann(hnsw = list(M = 5, ef_c = 10, ef_s = 10)))  result #> ======================================================== #> Blocking based on the hnsw method. #> Number of blocks: 2. #> Number of columns used for blocking: 28. #> Reduction ratio: 0.5714. #> ======================================================== #> Distribution of the size of the blocks: #> 4  #> 2   ## an example using mlpack::lsh  result_lsh <- blocking(x = df_example$txt,                        ann = \"lsh\")  result_lsh #> ======================================================== #> Blocking based on the lsh method. #> Number of blocks: 2. #> Number of columns used for blocking: 28. #> Reduction ratio: 0.5714. #> ======================================================== #> Distribution of the size of the blocks: #> 4  #> 2"},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_ann.html","id":null,"dir":"Reference","previous_headings":"","what":"Controls for approximate nearest neighbours algorithms — controls_ann","title":"Controls for approximate nearest neighbours algorithms — controls_ann","text":"Controls ANN algorithms used package","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_ann.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controls for approximate nearest neighbours algorithms — controls_ann","text":"","code":"controls_ann(   sparse = FALSE,   nnd = list(k_build = 30, use_alt_metric = TRUE, init = \"tree\", n_trees = NULL,     leaf_size = NULL, max_tree_depth = 200, margin = \"auto\", n_iters = NULL, delta =     0.001, max_candidates = NULL, low_memory = TRUE, n_search_trees = 1,     pruning_degree_multiplier = 1.5, diversify_prob = 1, weight_by_degree = FALSE,     prune_reverse = FALSE, progress = \"bar\", obs = \"R\"),   hnsw = list(M = 25, ef_c = 200, ef_s = 200, grain_size = 1, byrow = TRUE),   lsh = list(bucket_size = 500, hash_width = 10, num_probes = 0, projections = 10, tables     = 30),   annoy = list(n_trees = 250, build_on_disk = FALSE),   kd = list(algorithm = \"dual_tree\", epsilon = 0, leaf_size = 20, random_basis = FALSE,     rho = 0.7, tau = 0, tree_type = \"kd\") )"},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_ann.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controls for approximate nearest neighbours algorithms — controls_ann","text":"sparse whether sparse data used input algorithms, nnd parameters rnndescent::rnnd_build() rnndescent::rnnd_query(), hnsw parameters RcppHNSW::hnsw_build() RcppHNSW::hnsw_search(), lsh parameters mlpack::lsh(), annoy parameters RcppAnnoy package, kd parameters mlpack::knn() function.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_ann.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Controls for approximate nearest neighbours algorithms — controls_ann","text":"Returns list parameters","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_ann.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Controls for approximate nearest neighbours algorithms — controls_ann","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"Controls for processing text data — controls_txt","title":"Controls for processing text data — controls_txt","text":"Controls text data used blocking functions","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controls for processing text data — controls_txt","text":"","code":"controls_txt(n_shingles = 2L, n_chunks = 10L)"},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controls for processing text data — controls_txt","text":"n_shingles length shingles (default 2L), passed tokenizers::tokenize_character_shingles, n_chunks passed (default 10L) tokenizers::tokenize_character_shingles.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_txt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Controls for processing text data — controls_txt","text":"Returns list parameters.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_txt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Controls for processing text data — controls_txt","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_annoy.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","title":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","text":"See details RcppAnnoy package.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_annoy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","text":"","code":"method_annoy(x, y, k, distance, verbose, path, seed, control)"},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_annoy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","text":"x deduplication reference data, y query data, k number neighbours return, distance distance metric, verbose TRUE, log messages console, path path write index, seed seed pseudo-random numbers algorithm, control controls new build methods RcppAnnoy.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_annoy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","text":"Imports","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_annoy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_hnsw.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function to use HNSW algorithm via the RcppHNSW package. — method_hnsw","title":"An internal function to use HNSW algorithm via the RcppHNSW package. — method_hnsw","text":"See details RcppHNSW::hnsw_build RcppHNSW::hnsw_search.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_hnsw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function to use HNSW algorithm via the RcppHNSW package. — method_hnsw","text":"","code":"method_hnsw(x, y, k, distance, verbose, n_threads, path, control)"},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_hnsw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function to use HNSW algorithm via the RcppHNSW package. — method_hnsw","text":"x deduplication reference data, y query data, k number neighbours return, distance type distance calculate, verbose TRUE, log messages console, n_threads Maximum number threads use, path path write index, control controls HNSW algorithm.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_hnsw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An internal function to use HNSW algorithm via the RcppHNSW package. — method_hnsw","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_mlpack.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function to use the LSH and KD-tree algorithm via the mlpack package. — method_mlpack","title":"An internal function to use the LSH and KD-tree algorithm via the mlpack package. — method_mlpack","text":"See details mlpack::lsh mlpack::knn","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_mlpack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function to use the LSH and KD-tree algorithm via the mlpack package. — method_mlpack","text":"","code":"method_mlpack(x, y, algo = c(\"lsh\", \"kd\"), k, verbose, seed, path, control)"},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_mlpack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function to use the LSH and KD-tree algorithm via the mlpack package. — method_mlpack","text":"x deduplication reference data, y query data, algo algorithm used: lsh kd, k number neighbours return, verbose TRUE, log messages console, seed seed pseudo-random numbers algorithm, path path write index, control controls lsh kd algorithms.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_mlpack.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An internal function to use the LSH and KD-tree algorithm via the mlpack package. — method_mlpack","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_nnd.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function to use the NN descent algorithm via the rnndescent package. — method_nnd","title":"An internal function to use the NN descent algorithm via the rnndescent package. — method_nnd","text":"See details rnndescent::rnnd_build rnndescent::rnnd_query.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_nnd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function to use the NN descent algorithm via the rnndescent package. — method_nnd","text":"","code":"method_nnd(x, y, k, distance, verbose, n_threads, control)"},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_nnd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function to use the NN descent algorithm via the rnndescent package. — method_nnd","text":"x deduplication reference data, y query data, k number neighbours return, distance type distance calculate, verbose TRUE, log messages console, n_threads maximum number threads use, control controls NN descent algorithm.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_nnd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An internal function to use the NN descent algorithm via the rnndescent package. — method_nnd","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":null,"dir":"Reference","previous_headings":"","what":"Integration with the reclin2 package — pair_ann","title":"Integration with the reclin2 package — pair_ann","text":"Function integration reclin2 package. function based reclin2::pair_minsim() reuses source code.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integration with the reclin2 package — pair_ann","text":"","code":"pair_ann(   x,   y = NULL,   on,   on_blocking = NULL,   deduplication = TRUE,   keep_block = TRUE,   add_xy = TRUE,   ... )"},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integration with the reclin2 package — pair_ann","text":"x reference data (data.frame data.table), y query data  (data.frame data.table, default NULL), character vector column names ANN search, on_blocking blocking variables (currently supported), deduplication whether deduplication performed (default TRUE), keep_block whether keep block variable set, add_xy whether add x y, ... arguments passed blocking() function.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integration with the reclin2 package — pair_ann","text":"Returns data.table two columns .x .y. Columns .x .y row numbers data.frames x y respectively. Returning data.table also class pairs allows integration reclin2::compare_pairs() package.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integration with the reclin2 package — pair_ann","text":"Imports","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Integration with the reclin2 package — pair_ann","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integration with the reclin2 package — pair_ann","text":"","code":"# example using two datasets from reclin2  library(reclin2) #> Loading required package: data.table  data(\"linkexample1\", \"linkexample2\", package = \"reclin2\")  linkexample1$txt <- with(linkexample1, tolower(paste0(firstname, lastname, address, sex, postcode))) linkexample1$txt <- gsub(\"\\\\s+\", \"\", linkexample1$txt) linkexample2$txt <- with(linkexample2, tolower(paste0(firstname, lastname, address, sex, postcode))) linkexample2$txt <- gsub(\"\\\\s+\", \"\", linkexample2$txt)  # pairing records from linkexample2 to linkexample1 based on txt column  pair_ann(x = linkexample1, y = linkexample2, on = \"txt\", deduplication = FALSE) |> compare_pairs(on = \"txt\", comparators = list(cmp_jarowinkler())) |> score_simple(\"score\", on = \"txt\") |> select_threshold(\"threshold\", score = \"score\", threshold = 0.75) |> link(selection = \"threshold\") #>   Total number of pairs: 5 pairs #>  #> Key: <.y> #>       .y    .x  id.x lastname.x firstname.x  address.x  sex.x postcode.x #>    <int> <int> <int>     <fctr>      <fctr>     <fctr> <fctr>     <fctr> #> 1:     1     2     2      Smith      George 12 Mainstr      M    1234 AB #> 2:     2     3     3    Johnson        Anna 61 Mainstr      F    1234 AB #> 3:     3     4     4    Johnson     Charles 61 Mainstr      M    1234 AB #> 4:     4     6     6   Schwartz         Ben  1 Eaststr      M    6789 XY #> 5:     5     6     6   Schwartz         Ben  1 Eaststr      M    6789 XY #>                             txt.x  id.y lastname.y firstname.y     address.y #>                            <char> <int>     <fctr>      <fctr>        <fctr> #> 1:    georgesmith12mainstrm1234ab     2      Smith      Gearge 12 Mainstreet #> 2:    annajohnson61mainstrf1234ab     3     Jonson          A. 61 Mainstreet #> 3: charlesjohnson61mainstrm1234ab     4    Johnson     Charles    61 Mainstr #> 4:     benschwartz1eaststrm6789xy     6   Schwartz         Ben        1 Main #> 5:     benschwartz1eaststrm6789xy     7   Schwartz        Anna     1 Eaststr #>     sex.y postcode.y                           txt.y #>    <fctr>     <fctr>                          <char> #> 1:   <NA>    1234 AB geargesmith12mainstreetna1234ab #> 2:      F    1234 AB     a.jonson61mainstreetf1234ab #> 3:      F    1234 AB  charlesjohnson61mainstrf1234ab #> 4:      M    6789 XY         benschwartz1mainm6789xy #> 5:      F    6789 XY     annaschwartz1eaststrf6789xy"},{"path":"https://ncn-foreigners.github.io/blocking/news/index.html","id":"version-010","dir":"Changelog","previous_headings":"","what":"version 0.1.0","title":"version 0.1.0","text":"supports following packages: RcppHNSW, mlpack RcppAnnoy. supports blocking deduplication record linkage. metrics true blocking known based igraph::compare. testing tinytest package. initial support reclin2 package. class blocking introduced. s3method printing. first vignette added. evaluation standard metrics (recall, fpr etc) added, works vector deduplication. added saving index hnsw annoy rnndescend support added.","code":""}]
