[{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/articles/v1-deduplication.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Blocking records for deduplication","text":"Read required packages. Read RLdata500 data (taken RecordLinkage package). dataset contains 500 rows 450 entities.","code":"library(blocking) library(data.table) data(RLdata500) head(RLdata500) #>    fname_c1 fname_c2 lname_c1 lname_c2    by    bm    bd rec_id ent_id #>      <char>   <char>   <char>   <char> <int> <int> <int>  <int>  <int> #> 1:  CARSTEN             MEIER           1949     7    22      1     34 #> 2:     GERD             BAUER           1968     7    27      2     51 #> 3:   ROBERT          HARTMANN           1930     4    30      3    115 #> 4:   STEFAN             WOLFF           1957     9     2      4    189 #> 5:     RALF           KRUEGER           1966     1    13      5     72 #> 6:  JUERGEN            FRANKE           1929     7     4      6    142"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/articles/v1-deduplication.html","id":"blocking-for-deduplication","dir":"Articles","previous_headings":"","what":"Blocking for deduplication","title":"Blocking records for deduplication","text":"Now create new column concatenates information row. next step use newly created column blocking function. specify verbose, get information progress. Results follows: based rnndescent created 133 blocks, based 429 columns (2 character shingles), 45 blocks 2 elements, 33 blocks 3 elements, …, 1 block 17 elements. Structure object follows: result – data.table identifiers block IDs, method – method used, deduplication – whether deduplication applied, representation – whether shingles vectors used, metrics – standard metrics based igraph::compare methods comparing graphs (NULL), confusion – confusion matrix (NULL), colnames – column names used comparison, graph – igraph object mainly visualisation. Plot connections.  resulting data.table four columns: x – reference dataset (.e. RLdata500) – may contain units RLdata500, y - query (row RLdata500) – may contain units RLdata500, block – block ID, dist – distance objects. Create long data.table information blocks units original dataset. add block information final dataset. can check many blocks entities (ent_id) observed. example, entities blocks. can visualise distances units stored df_blocks$result data set. Clearly mixture two groups: matches (close 0) non-matches (close 1).  Finally, can visualise result based information whether block contains matches .","code":"RLdata500[, id_count :=.N, ent_id] ## how many times given unit occurs RLdata500[, bm:=sprintf(\"%02d\", bm)] ## add leading zeros to month RLdata500[, bd:=sprintf(\"%02d\", bd)] ## add leading zeros to day RLdata500[, txt:=tolower(paste0(fname_c1,fname_c2,lname_c1,lname_c2,by,bm,bd))] head(RLdata500) #>    fname_c1 fname_c2 lname_c1 lname_c2    by     bm     bd rec_id ent_id #>      <char>   <char>   <char>   <char> <int> <char> <char>  <int>  <int> #> 1:  CARSTEN             MEIER           1949     07     22      1     34 #> 2:     GERD             BAUER           1968     07     27      2     51 #> 3:   ROBERT          HARTMANN           1930     04     30      3    115 #> 4:   STEFAN             WOLFF           1957     09     02      4    189 #> 5:     RALF           KRUEGER           1966     01     13      5     72 #> 6:  JUERGEN            FRANKE           1929     07     04      6    142 #>    id_count                    txt #>       <int>                 <char> #> 1:        1   carstenmeier19490722 #> 2:        2      gerdbauer19680727 #> 3:        1 roberthartmann19300430 #> 4:        1    stefanwolff19570902 #> 5:        1    ralfkrueger19660113 #> 6:        1  juergenfranke19290704 df_blocks <- blocking(x = RLdata500$txt, ann = \"nnd\", verbose = 1, graph = TRUE, seed = 2024) #> ===== creating tokens ===== #> ===== starting search (nnd, x, y: 500, 500, t: 429) ===== #> ===== creating graph ===== df_blocks #> ======================================================== #> Blocking based on the nnd method. #> Number of blocks: 133. #> Number of columns used for blocking: 429. #> Reduction ratio: 0.9919. #> ======================================================== #> Distribution of the size of the blocks: #>  2  3  4  5  6  7  8  9 11 17  #> 45 33 21 14  7  4  4  3  1  1 str(df_blocks,1) #> List of 8 #>  $ result        :Classes 'data.table' and 'data.frame': 367 obs. of  4 variables: #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ method        : chr \"nnd\" #>  $ deduplication : logi TRUE #>  $ representation: chr \"shingles\" #>  $ metrics       : NULL #>  $ confusion     : NULL #>  $ colnames      : chr [1:429] \"86\" \"ap\" \"av\" \"bf\" ... #>  $ graph         :Class 'igraph'  hidden list of 10 #>  - attr(*, \"class\")= chr \"blocking\" plot(df_blocks$graph, vertex.size=1, vertex.label = NA) head(df_blocks$result) #>        x     y block       dist #>    <int> <int> <num>      <num> #> 1:     1    64    34 0.47379869 #> 2:     2    43     1 0.08074528 #> 3:     2   486     1 0.41023219 #> 4:     3   450    89 0.43263352 #> 5:     4   234    12 0.52565837 #> 6:     5   128     2 0.51333570 df_block_melted <- melt(df_blocks$result, id.vars = c(\"block\", \"dist\")) df_block_melted_rec_block <- unique(df_block_melted[, .(rec_id=value, block)]) head(df_block_melted_rec_block) #>    rec_id block #>     <int> <num> #> 1:      1    34 #> 2:      2     1 #> 3:      3    89 #> 4:      4    12 #> 5:      5     2 #> 6:      6    34 RLdata500[df_block_melted_rec_block, on = \"rec_id\", block_id := i.block] head(RLdata500) #>    fname_c1 fname_c2 lname_c1 lname_c2    by     bm     bd rec_id ent_id #>      <char>   <char>   <char>   <char> <int> <char> <char>  <int>  <int> #> 1:  CARSTEN             MEIER           1949     07     22      1     34 #> 2:     GERD             BAUER           1968     07     27      2     51 #> 3:   ROBERT          HARTMANN           1930     04     30      3    115 #> 4:   STEFAN             WOLFF           1957     09     02      4    189 #> 5:     RALF           KRUEGER           1966     01     13      5     72 #> 6:  JUERGEN            FRANKE           1929     07     04      6    142 #>    id_count                    txt block_id #>       <int>                 <char>    <num> #> 1:        1   carstenmeier19490722       34 #> 2:        2      gerdbauer19680727        1 #> 3:        1 roberthartmann19300430       89 #> 4:        1    stefanwolff19570902       12 #> 5:        1    ralfkrueger19660113        2 #> 6:        1  juergenfranke19290704       34 RLdata500[, .(uniq_blocks = uniqueN(block_id)), .(ent_id)][, .N, uniq_blocks] #>    uniq_blocks     N #>          <int> <int> #> 1:           1   450 hist(df_blocks$result$dist, xlab = \"Distances\", ylab = \"Frequency\", breaks = \"fd\",      main = \"Distances calculated between units\") df_for_density <- copy(df_block_melted[block %in% RLdata500$block_id]) df_for_density[, match:= block %in% RLdata500[id_count == 2]$block_id]  plot(density(df_for_density[match==FALSE]$dist), col = \"blue\", xlim = c(0, 0.8),       main = \"Distribution of distances between\\nclusters type (match=red, non-match=blue)\") lines(density(df_for_density[match==TRUE]$dist), col = \"red\", xlim = c(0, 0.8))"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/articles/v2-reclin.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Blocking records for record linkage","text":"Read required packages","code":"library(blocking) library(data.table)"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/articles/v2-reclin.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Blocking records for record linkage","text":"Read example data tutorial reclin package URos 2021 Conference. data sets ESSnet Data Integration stated repository: census object 25343 rows 13 columns, cis object 24613 rows 10 columns. Census data CIS data randomly select 12671 records census 12306 records cis. need create new columns concatenate variables pername1 enumpc.","code":"These totally fictional data sets are supposed to have captured details of persons up to the date 31 December 2011.  Any years of birth captured as 2012 are therefore in error.  Note that in the fictional Census data set, dates of birth between 27 March 2011 and 31 December 2011 are not necessarily in error.  census: A fictional data set to represent some observations from a         decennial Census cis: Fictional observations from Customer Information System, which is         combined administrative data from the tax and benefit systems  In the dataset census all records contain a person_id. For some of the records in cis the person_id is also available. This information can be used to evaluate the linkage (assuming these records from the cis are representable  all records in the cis). data(census) data(cis) head(census) #>       person_id pername1 pername2    sex dob_day dob_mon dob_year hse_num #>          <char>   <char>   <char> <char>  <char>  <char>   <char>   <num> #> 1: DE03US001001    COUIE    PRICE      M       1       6     1960       1 #> 2: DE03US001002    ABBIE    PVICE      F       9      11     1961       1 #> 3: DE03US001003    LACEY    PRICE      F       7       2     1999       1 #> 4: DE03US001004   SAMUEL    PRICE      M      13       4     1990       1 #> 5: DE03US001005   JOSEPH    PRICE      M      20       4     1986       1 #> 6: DE03US001006     JOSH    PRICE      M      14       2     1996       1 #>           enumcap enumpc      str_nam         cap_add        census_id #>            <char> <char>       <char>          <char>           <char> #> 1: 1 WINDSOR ROAD DE03US Windsor Road 1, Windsor Road CENSDE03US001001 #> 2: 1 WINDSOR ROAD DE03US Windsor Road 1, Windsor Road CENSDE03US001002 #> 3: 1 WINDSOR ROAD DE03US Windsor Road 1, Windsor Road CENSDE03US001003 #> 4: 1 WINDSOR ROAD DE03US Windsor Road 1, Windsor Road CENSDE03US001004 #> 5: 1 WINDSOR ROAD DE03US Windsor Road 1, Windsor Road CENSDE03US001005 #> 6: 1 WINDSOR ROAD DE03US Windsor Road 1, Windsor Road CENSDE03US001006 head(cis) #>        person_id pername1 pername2    sex dob_day dob_mon dob_year #>           <char>   <char>   <char> <char>  <char>  <char>   <char> #> 1: PO827ER091001   HAYDEN     HALL      M               1          #> 2: LS992DB024001    SEREN ANDERSON      F       1       1          #> 3:  M432ZZ053003    LEWIS    LEWIS      M       1       1          #> 4:  SW75TQ018001 HARRISON   POSTER      M       5       1          #> 5: EX527TR017006 MUHAMMED   WATSUN      M       7       1          #> 6: SW540RB001001     RHYS THOMPSON      M       7       1          #>               enumcap  enumpc           cis_id #>                <char>  <char>           <char> #> 1:   91 CLARENCE ROAD PO827ER CISPO827ER091001 #> 2:     24 CHURCH LANE LS992DB CISLS992DB024001 #> 3:     53 CHURCH ROAD  M432ZZ  CISM432ZZ053003 #> 4:  19 HIGHFIELD ROAD  SW75TG  CISSW75TQ018001 #> 5: 17 VICTORIA STREET         CISEX527TR017006 #> 6: 1 SPRINGFIELD ROAD SW540RB CISSW540RB001001 set.seed(2024) census <- census[sample(nrow(census), floor(nrow(census) / 2)), ] cis <- cis[sample(nrow(cis), floor(nrow(cis) / 2)), ] census[, txt:=paste0(pername1, pername2, sex, dob_day, dob_mon, dob_year, enumcap, enumpc)] cis[, txt:=paste0(pername1, pername2, sex, dob_day, dob_mon, dob_year, enumcap, enumpc)]"},{"path":[]},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/articles/v2-reclin.html","id":"using-basic-functionalities-of-blocking-package","dir":"Articles","previous_headings":"Linking datasets","what":"Using basic functionalities of blocking package","title":"Blocking records for record linkage","text":"goal exercise link units CIS dataset CENSUS dataset. Distribution distances pair.  Example pairs. Let’s take look first pair. Obviously typo pername1 variables , appears match.","code":"result1 <- blocking(x = census$txt, y = cis$txt, verbose = 1) #> ===== creating tokens ===== #> ===== starting search (nnd, x, y: 12671, 12306, t: 1053) ===== #> ===== creating graph ===== hist(result1$result$dist, main = \"Distribution of distances between pairs\", xlab = \"Distances\") head(result1$result, n = 10) #>         x     y block       dist #>     <int> <int> <num>      <num> #>  1:     1 12088  8344 0.04520786 #>  2:     2 12156  8382 0.26164961 #>  3:     3  7243  5759 0.04604095 #>  4:     3 10643  5759 0.37306446 #>  5:     4  8422  6457 0.35876358 #>  6:     6  9442  7042 0.31899476 #>  7:     6 10195  7042 0.04166669 #>  8:     7   745   725 0.16333997 #>  9:     8  3072  2770 0.25784391 #> 10:     8 10717  2770 0.12358326 cbind(t(census[1, c(1:7, 9:10)]), t(cis[12088, 1:9])) #>           [,1]              [,2]              #> person_id \"SW122AB001001\"   \"SW122AB001001\"   #> pername1  \"GEURGE\"          \"GEORGE\"          #> pername2  \"HUGHES\"          \"HUGHES\"          #> sex       \"M\"               \"M\"               #> dob_day   \"19\"              \"19\"              #> dob_mon   \"5\"               \"5\"               #> dob_year  \"1942\"            \"1942\"            #> enumcap   \"1 VICTORIA ROAD\" \"1 VICTORIA ROAD\" #> enumpc    \"SW122AB\"         \"SW122AB\""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/articles/v2-reclin.html","id":"assessing-the-quality","dir":"Articles","previous_headings":"Linking datasets","what":"Assessing the quality","title":"Blocking records for record linkage","text":"records, information correct linkage. can use information evaluate approach. example 5991 pairs. Let’s see approach handled problem. seems default parameters NND method result FNR 0.18%. can see decreasing epsilon parameter suggested Nearest Neighbor Descent vignette help. Changing epsilon search parameter 0.1 0.2 decreased FNR 0.07%. Finally, compare NND HNSW algorithm example. seems HNSW algorithm also performed 0.07% FNR.","code":"matches <- merge(x = census[, .(x=1:.N, person_id)],                  y = cis[, .(y = 1:.N, person_id)],                  by = \"person_id\") matches[, block:=1:.N] head(matches) #> Key: <person_id> #>       person_id     x     y block #>          <char> <int> <int> <int> #> 1: DE03US001003  1357 10248     1 #> 2: DE03US008001  4506  2506     2 #> 3: DE03US012002  2706 12005     3 #> 4: DE03US012003  6317 11103     4 #> 5: DE03US013003  4388 10673     5 #> 6: DE03US014003  9463 11793     6 result2 <- blocking(x = census$txt, y = cis$txt, verbose = 1,                     true_blocks = matches[, .(x, y, block)]) #> ===== creating tokens ===== #> ===== starting search (nnd, x, y: 12671, 12306, t: 1053) ===== #> ===== creating graph ===== result2 #> ======================================================== #> Blocking based on the nnd method. #> Number of blocks: 8441. #> Number of columns used for blocking: 1053. #> Reduction ratio: 0.9999. #> ======================================================== #> Distribution of the size of the blocks: #>    2    3    4    5    6    7    8    9  #> 5575 2084  609  140   25    6    1    1  #> ======================================================== #> Evaluation metrics (standard): #>      recall   precision         fpr         fnr    accuracy specificity  #>     99.8159     99.5326      0.0001      0.1841     99.9999     99.9999  #>    f1_score  #>     99.6740 ann_control_pars <- controls_ann() ann_control_pars$nnd$epsilon <- 0.2  result3 <- blocking(x = census$txt, y = cis$txt, verbose = 1,                      true_blocks = matches[, .(x, y, block)],                      control_ann = ann_control_pars) #> ===== creating tokens ===== #> ===== starting search (nnd, x, y: 12671, 12306, t: 1053) ===== #> ===== creating graph ===== result3 #> ======================================================== #> Blocking based on the nnd method. #> Number of blocks: 8448. #> Number of columns used for blocking: 1053. #> Reduction ratio: 0.9999. #> ======================================================== #> Distribution of the size of the blocks: #>    2    3    4    5    6    7    8    9  #> 5587 2082  604  142   26    5    1    1  #> ======================================================== #> Evaluation metrics (standard): #>      recall   precision         fpr         fnr    accuracy specificity  #>     99.9332     99.8331      0.0000      0.0668    100.0000    100.0000  #>    f1_score  #>     99.8831 result4 <- blocking(x = census$txt, y = cis$txt, verbose = 1,                      true_blocks = matches[, .(x, y, block)],                      ann = \"hnsw\") #> ===== creating tokens ===== #> ===== starting search (hnsw, x, y: 12671, 12306, t: 1053) ===== #> ===== creating graph ===== result4 #> ======================================================== #> Blocking based on the hnsw method. #> Number of blocks: 8446. #> Number of columns used for blocking: 1053. #> Reduction ratio: 0.9999. #> ======================================================== #> Distribution of the size of the blocks: #>    2    3    4    5    6    7    8    9  #> 5586 2078  607  142   26    5    1    1  #> ======================================================== #> Evaluation metrics (standard): #>      recall   precision         fpr         fnr    accuracy specificity  #>     99.9332     99.8331      0.0000      0.0668    100.0000    100.0000  #>    f1_score  #>     99.8831"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/articles/v2-reclin.html","id":"compare-results","dir":"Articles","previous_headings":"Linking datasets","what":"Compare results","title":"Blocking records for record linkage","text":"Finally, can compare results two ANN algorithms. overlap neighbours given ","code":"c(\"no tuning\" = mean(result2$result[order(y)]$x == result4$result[order(y)]$x)*100,   \"with tuning\" = mean(result3$result[order(y)]$x == result4$result[order(y)]$x)*100) #>   no tuning with tuning  #>    98.76483    99.17926"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/articles/v3-integration.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Integration with existing packages","text":"","code":"library(blocking) library(reclin2) #> Loading required package: data.table"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/articles/v3-integration.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Integration with existing packages","text":"example use dataset Blocking records record linkage vignette.","code":"data(census) data(cis) census[, x:=1:.N] cis[, y:=1:.N]"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/articles/v3-integration.html","id":"integration-with-the-reclin2-package","dir":"Articles","previous_headings":"","what":"Integration with the reclin2 package","title":"Integration with existing packages","text":"package contains function pair_ann aims integration reclin2 package. function works follows. provides information total number pairs. can included pipeline reclin2 package (note use different ANN time).","code":"pair_ann(x = census[1:1000],           y = cis[1:1000],           on = c(\"pername1\", \"pername2\", \"sex\", \"dob_day\", \"dob_mon\", \"dob_year\", \"enumcap\", \"enumpc\"),           deduplication = FALSE) |>   head() #>   First data set:  1 000 records #>   Second data set: 1 000 records #>   Total number of pairs: 6 pairs #>   Blocking on: 'pername1', 'pername2', 'sex', 'dob_day', #>     'dob_mon', 'dob_year', 'enumcap', 'enumpc' #>  #>       .x    .y block #>    <int> <int> <num> #> 1:   204     1     1 #> 2:   204   176     1 #> 3:   204   375     1 #> 4:   204   391     1 #> 5:   204   405     1 #> 6:   204   424     1 pair_ann(x = census[1:1000],           y = cis[1:1000],           on = c(\"pername1\", \"pername2\", \"sex\", \"dob_day\", \"dob_mon\", \"dob_year\", \"enumcap\", \"enumpc\"),           deduplication = FALSE,          ann = \"hnsw\") |>   compare_pairs(on = c(\"pername1\", \"pername2\", \"sex\", \"dob_day\", \"dob_mon\", \"dob_year\", \"enumcap\", \"enumpc\"),                 comparators = list(cmp_jarowinkler())) |>   score_simple(\"score\",                on = c(\"pername1\", \"pername2\", \"sex\", \"dob_day\", \"dob_mon\", \"dob_year\", \"enumcap\", \"enumpc\")) |>   select_threshold(\"threshold\", score = \"score\", threshold = 6) |>   link(selection = \"threshold\") |>   head() #>   Total number of pairs: 6 pairs #>  #> Key: <.y> #>       .y    .x   person_id.x pername1.x pername2.x  sex.x dob_day.x dob_mon.x #>    <int> <int>        <char>     <char>     <char> <char>    <char>    <char> #> 1:    11   945 DE256NG039003    HARRIET    THOMSON      F        12         1 #> 2:    71   427 DE159QA062001      LEWIS      GREEN      M        23         3 #> 3:    83   720 DE237GG025002     IMOGEN      DARIS      F         6         4 #> 4:    99   136 DE125LU022001     DANIEC     MICCER      M        21         4 #> 5:   154   949 DE256NG040002      CHLOE     WILSON      F         5         7 #> 6:   156   549 DE159QY035002        AVA       KING      F         7         7 #>    dob_year.x hse_num           enumcap.x enumpc.x          str_nam #>        <char>   <num>              <char>   <char>           <char> #> 1:       1995      39 39 SPRINGFIELD ROAD  DE256NG Springfield Road #> 2:       1973      62      62 CHURCH ROAD  DE159QA      Church Road #> 3:       1968      25   25 WOODLANDS ROAD  DE237GG   Woodlands Road #> 4:       1947      22        22 PARK LANE  DE125LU        Park Lane #> 5:       1978      40 40 SPRINGFIELD ROAD  DE256NG Springfield Road #> 6:       1969      35      35 CHURCH ROAD  DE159QY      Church Road #>                 cap_add         census_id     x #>                  <char>            <char> <int> #> 1: 39, Springfield Road CENSDE256NG039003   945 #> 2:      62, Church Road CENSDE159QA062001   427 #> 3:   25, Woodlands Road CENSDE237GG025002   720 #> 4:        22, Park Lane CENSDE125LU022001   136 #> 5: 40, Springfield Road CENSDE256NG040002   949 #> 6:      35, Church Road CENSDE159QY035002   549 #>                                               txt.x   person_id.y pername1.y #>                                              <char>        <char>     <char> #> 1: HARRIETTHOMSONF121199539 SPRINGFIELD ROADDE256NG DE256NG039003    HARRIET #> 2:          LEWISGREENM233197362 CHURCH ROADDE159QA DE159QA062001      LEWIS #> 3:       IMOGENDARISF64196825 WOODLANDS ROADDE237GG DE237GG025002     IMOGEW #> 4:          DANIECMICCERM214194722 PARK LANEDE125LU DE125LU022001     DAMIEL #> 5:     CHLOEWILSONF57197840 SPRINGFIELD ROADDE256NG DE256NG040002      CHLOE #> 6:              AVAKINGF77196935 CHURCH ROADDE159QY DE159QY035002        AVA #>    pername2.y  sex.y dob_day.y dob_mon.y dob_year.y           enumcap.y #>        <char> <char>    <char>    <char>     <char>              <char> #> 1:    THOMSON      F        12         1            39 SPRINGFIELD ROAD #> 2:      GREEN      M        23         3                 62 CHURCH ROAD #> 3:      DAVIS      F         6         4              25 WOODLANDS ROAD #> 4:     HILLER      M        21         4                   22 PARK LANE #> 5:     WILSOM      F         5         7            40 SPRINGFIELD ROAD #> 6:       KING      F         7         7                 35 CHURCH ROAD #>    enumpc.y           cis_id     y                                        txt.y #>      <char>           <char> <int>                                       <char> #> 1:  DE256NG CISDE256NG039003    11 HARRIETTHOMSONF12139 SPRINGFIELD ROADDE256NG #> 2:  DE159QA CISDE159QA062001    71          LEWISGREENM23362 CHURCH ROADDE159QA #> 3:  DE237GG CISDE237GG025002    83       IMOGEWDAVISF6425 WOODLANDS ROADDE237GG #> 4:  DE125LU CISDE125LU022001    99          DAMIELHILLERM21422 PARK LANEDE125LU #> 5:  DE256NG CISDE256NG040002   154     CHLOEWILSOMF5740 SPRINGFIELD ROADDE256NG #> 6:  DE159QY CISDE159QY035002   156              AVAKINGF7735 CHURCH ROADDE159QY"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/articles/v3-integration.html","id":"usage-with-fastlink-package","dir":"Articles","previous_headings":"","what":"Usage with fastLink package","title":"Integration with existing packages","text":"Just use block column function fastLink::blockData(). result obtain list records blocked processing.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/articles/v3-integration.html","id":"usage-with-recordlinkage-package","dir":"Articles","previous_headings":"","what":"Usage with RecordLinkage package","title":"Integration with existing packages","text":"Just use block column argument blockfld compare.dedup() compare.linkage() function. Please note block column RecordLinkage package stored character numeric/integer vector.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maciej Beręsewicz. Author, maintainer. Adam Struzik. Author, contractor.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beręsewicz M, Struzik (2025). blocking: Various Blocking Methods Entity Resolution. R package version 1.0.0, https://github.com/ncn-foreigners/blocking.","code":"@Manual{,   title = {blocking: Various Blocking Methods for Entity Resolution},   author = {Maciej Beręsewicz and Adam Struzik},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/ncn-foreigners/blocking}, }"},{"path":[]},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Various Blocking Methods for Entity Resolution","text":"R package designed block records data deduplication record linkage (also known entity resolution) using approximate nearest neighbours algorithms (ANN) graphs (via igraph package). supports following R packages bind specific ANN algorithms: rnndescent (default, powerful, supports sparse matrices), RcppHNSW (powerful support sparse matrices), RcppAnnoy, mlpack (see mlpack::lsh mlpack::knn). package can used reclin2 package via blocking::pair_ann function.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Various Blocking Methods for Entity Resolution","text":"Install GitHub blocking package :","code":"# install.packages(\"remotes\") # uncomment if needed remotes::install_github(\"ncn-foreigners/blocking\")"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Various Blocking Methods for Entity Resolution","text":"Load packages examples Generate simple data three groups (df_example) reference data (df_base). Deduplication using blocking function. Output contains information: method used (nnd refers NN descent algorithm), number blocks created (2 blocks), number columns used blocking, .e. many shingles created text2vec package (28), reduction ratio, .e. large reduction comparison pairs (0.5714 means blocking reduces comparison 57%). Table blocking results contains: row numbers original data, block number (integers), distance (ANN algorithm). Deduplication using pair_ann function integration reclin2 package. Use pipeline reclin2 package. Linking records using function df_base “register” df_example reference (data).","code":"library(blocking) library(reclin2) #> Loading required package: data.table df_example <- data.frame(txt = c(   \"jankowalski\",   \"kowalskijan\",   \"kowalskimjan\",   \"kowaljan\",   \"montypython\",   \"pythonmonty\",   \"cyrkmontypython\",   \"monty\" )) df_base <- data.frame(txt = c(\"montypython\", \"kowalskijan\", \"other\"))  df_example #>               txt #> 1     jankowalski #> 2     kowalskijan #> 3    kowalskimjan #> 4        kowaljan #> 5     montypython #> 6     pythonmonty #> 7 cyrkmontypython #> 8           monty  df_base #>           txt #> 1 montypython #> 2 kowalskijan #> 3       other blocking_result <- blocking(x = df_example$txt) blocking_result #> ======================================================== #> Blocking based on the nnd method. #> Number of blocks: 2. #> Number of columns used for blocking: 28. #> Reduction ratio: 0.5714. #> ======================================================== #> Distribution of the size of the blocks: #> 4  #> 2 blocking_result$result #>        x     y block       dist #>    <int> <int> <num>      <num> #> 1:     1     2     1 0.10000002 #> 2:     2     3     1 0.14188367 #> 3:     2     4     1 0.28286284 #> 4:     5     6     2 0.08333331 #> 5:     5     7     2 0.13397455 #> 6:     5     8     2 0.27831215 pair_ann(x = df_example, on = \"txt\") |>   compare_pairs(on = \"txt\", comparators = list(cmp_jarowinkler())) |>   score_simple(\"score\", on = \"txt\") |>   select_threshold(\"threshold\", score = \"score\", threshold = 0.55) |>   link(selection = \"threshold\") #>   Total number of pairs: 8 pairs #>  #> Key: <.y> #>       .y    .x       txt.x           txt.y #>    <int> <int>      <char>          <char> #> 1:     2     1 jankowalski     kowalskijan #> 2:     3     1 jankowalski    kowalskimjan #> 3:     3     2 kowalskijan    kowalskimjan #> 4:     4     1 jankowalski        kowaljan #> 5:     4     2 kowalskijan        kowaljan #> 6:     6     5 montypython     pythonmonty #> 7:     7     5 montypython cyrkmontypython #> 8:     8     5 montypython           monty pair_ann(x = df_base, y = df_example, on = \"txt\", deduplication = FALSE) |>   compare_pairs(on = \"txt\", comparators = list(cmp_jarowinkler())) |>   score_simple(\"score\", on = \"txt\") |>   select_threshold(\"threshold\", score = \"score\", threshold = 0.55) |>   link(selection = \"threshold\") #>   Total number of pairs: 8 pairs #>  #> Key: <.y> #>       .y    .x       txt.x           txt.y #>    <int> <int>      <char>          <char> #> 1:     1     2 kowalskijan     jankowalski #> 2:     2     2 kowalskijan     kowalskijan #> 3:     3     2 kowalskijan    kowalskimjan #> 4:     4     2 kowalskijan        kowaljan #> 5:     5     1 montypython     montypython #> 6:     6     1 montypython     pythonmonty #> 7:     7     1 montypython cyrkmontypython #> 8:     8     1 montypython           monty"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/index.html","id":"see-also","dir":"","previous_headings":"","what":"See also","title":"Various Blocking Methods for Entity Resolution","text":"See section Data Integration (Statistical Matching Record Linkage) Official Statistics Task View. Packages allow blocking: klsh – k-means locality sensitive hashing, reclin2 – pair_blocking, pari_minsim functions, fastLink – blockData function. : clevr – evaluation clustering, helper functions. exchanger – bayesian Entity Resolution Exchangeable Random Partition Priors","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Various Blocking Methods for Entity Resolution","text":"Work package supported National Science Centre, OPUS 20 grant . 2020/39/B/HS4/00941.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/RLdata500.html","id":null,"dir":"Reference","previous_headings":"","what":"RLdata500 dataset from the RecordLinkage package — RLdata500","title":"RLdata500 dataset from the RecordLinkage package — RLdata500","text":"data taken RecordLinkage R package developed Murat Sariyar Andreas Borg. package licensed GPL-3 license. RLdata500 table contains artificial personal data. records duplicated randomly generated errors. RLdata500 contains fifty duplicates.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/RLdata500.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RLdata500 dataset from the RecordLinkage package — RLdata500","text":"","code":"RLdata500"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/RLdata500.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RLdata500 dataset from the RecordLinkage package — RLdata500","text":"data.table 500 records. row represents one record, following columns: fname_c1 – first name, first component, fname_c2 – first name, second component, lname_c1 – last name, first component, lname_c2 – last name, second component, – year birth, bm – month birth, bd – day birth, rec_id – record id, ent_id – entity id.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/RLdata500.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"RLdata500 dataset from the RecordLinkage package — RLdata500","text":"Sariyar M., Borg . (2022). RecordLinkage: Record Linkage Functions Linking Deduplicating Data Sets. R package version 0.4-12.4, https://CRAN.R-project.org/package=RecordLinkage","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/RLdata500.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RLdata500 dataset from the RecordLinkage package — RLdata500","text":"","code":"data(\"RLdata500\") head(RLdata500) #>    fname_c1 fname_c2 lname_c1 lname_c2    by    bm    bd rec_id ent_id #>      <char>   <char>   <char>   <char> <int> <int> <int>  <int>  <int> #> 1:  CARSTEN             MEIER           1949     7    22      1     34 #> 2:     GERD             BAUER           1968     7    27      2     51 #> 3:   ROBERT          HARTMANN           1930     4    30      3    115 #> 4:   STEFAN             WOLFF           1957     9     2      4    189 #> 5:     RALF           KRUEGER           1966     1    13      5     72 #> 6:  JUERGEN            FRANKE           1929     7     4      6    142"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/blocking.html","id":null,"dir":"Reference","previous_headings":"","what":"Block records based on character vectors — blocking","title":"Block records based on character vectors — blocking","text":"Function creates shingles (strings 2 characters, default) vectors using given model (e.g., GloVe), applies approximate nearest neighbour (ANN) algorithms via rnndescent, RcppHNSW, RcppAnnoy mlpack packages, creates blocks using graphs via igraph.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/blocking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block records based on character vectors — blocking","text":"","code":"blocking(   x,   y = NULL,   representation = c(\"shingles\", \"vectors\"),   model,   deduplication = TRUE,   on = NULL,   on_blocking = NULL,   ann = c(\"nnd\", \"hnsw\", \"annoy\", \"lsh\", \"kd\"),   distance = c(\"cosine\", \"euclidean\", \"l2\", \"ip\", \"manhatan\", \"hamming\", \"angular\"),   ann_write = NULL,   ann_colnames = NULL,   true_blocks = NULL,   verbose = c(0, 1, 2),   graph = FALSE,   seed = 2023,   n_threads = 1,   control_txt = controls_txt(),   control_ann = controls_ann() )"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/blocking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block records based on character vectors — blocking","text":"x reference data (character vector matrix), y query data (character vector matrix), provided NULL default thus deduplication performed, representation method representing input data (possible c(\"shingles\", \"vectors\"); default \"shingles\"), model matrix containing word embeddings (e.g., GloVe), required representation = \"vectors\", deduplication whether deduplication applied (default TRUE y set NULL), variables ANN search (currently supported), on_blocking variables blocking records ANN search (currently supported), ann algorithm used searching ann (possible, c(\"nnd\", \"hnsw\", \"annoy\", \"lsh\", \"kd\"), default \"nnd\" corresponds nearest neighbour descent method), distance distance metric (default cosine, options possible see details), ann_write writing index file. Two files created: 1) index, 2) text file column names, ann_colnames file column names x y indices saved disk (currently supported), true_blocks matrix true blocks calculate evaluation metrics (standard metrics based confusion matrix well metrics compare returned). verbose whether log provided (0 = none, 1 = main, 2 = ANN algorithm verbose used), graph whether graph returned (default FALSE), seed seed algorithms (reproducibility), n_threads number threads used ANN algorithms adding data index query, control_txt list controls text data (passed itoken_parallel itoken), used representation = \"shingles\", control_ann list controls ANN algorithms.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/blocking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Block records based on character vectors — blocking","text":"Returns list containing: result – data.table indices (rows) x, y, block distance points method – name ANN algorithm used, deduplication – information whether deduplication applied, representation – information whether shingles vectors used, metrics – metrics quality assessment, true_blocks provided, confusion – confusion matrix, true_blocks provided, colnames – variable names (colnames) used search, graph – igraph class object.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/blocking.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Block records based on character vectors — blocking","text":"Maciej Beręsewicz, Adam Struzik","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/blocking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Block records based on character vectors — blocking","text":"","code":"## an example using RcppHNSW  df_example <- data.frame(txt = c(\"jankowalski\", \"kowalskijan\", \"kowalskimjan\", \"kowaljan\", \"montypython\", \"pythonmonty\", \"cyrkmontypython\", \"monty\"))  result <- blocking(x = df_example$txt,                    ann = \"hnsw\",                    control_ann = controls_ann(hnsw = control_hnsw(M = 5, ef_c = 10, ef_s = 10)))  result #> ======================================================== #> Blocking based on the hnsw method. #> Number of blocks: 2. #> Number of columns used for blocking: 28. #> Reduction ratio: 0.5714. #> ======================================================== #> Distribution of the size of the blocks: #> 4  #> 2   ## an example using GloVe and RcppAnnoy if (FALSE) { # \\dontrun{ old <- getOption(\"timeout\") options(timeout = 500) utils::download.file(\"https://nlp.stanford.edu/data/glove.6B.zip\", destfile = \"glove.6B.zip\") utils::unzip(\"glove.6B.zip\")  glove_6B_50d <- readr::read_table(\"glove.6B.50d.txt\",                                   col_names = FALSE,                                   show_col_types = FALSE) data.table::setDT(glove_6B_50d)  glove_vectors <- glove_6B_50d[,-1] glove_vectors <- as.matrix(glove_vectors) rownames(glove_vectors) <- glove_6B_50d$X1  ## spaces between words are required df_example_spaces <- data.frame(txt = c(\"jan kowalski\", \"kowalski jan\", \"kowalskim jan\", \"kowal jan\", \"monty python\", \"python monty\", \"cyrk monty python\", \"monty\"))  result_annoy <- blocking(x = df_example_spaces$txt,                          ann = \"annoy\",                          representation = \"vectors\",                          model = glove_vectors)  result_annoy  options(timeout = old) } # }"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/census.html","id":null,"dir":"Reference","previous_headings":"","what":"Fictional census data — census","title":"Fictional census data — census","text":"data set created Paula McLeod, Dick Heasman Ian Forbes, ONS, ESSnet DI --job training course, Southampton, 25-28 January 2011. contains fictional data representing observations decennial Census.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fictional census data — census","text":"","code":"census"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/census.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fictional census data — census","text":"data.table 25343 records. row represents one record, following columns: person_id – unique number person, consisting postcode, house number person number, pername1 – forename, pername2 – surname, sex – gender (M/F), dob_day – day birth, dob_mon – month birth, dob_year – year birth, hse_num – house number, numeric label house within street, enumcap – address consisting house number street name, enumpc – postcode, str_nam – street name person's household's street, cap_add – full address, consisting house number, street name postcode, census_id – person ID \"CENS\" added front.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/census.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fictional census data — census","text":"McLeod, P., Heasman, D., Forbes, . (2011). Simulated data ESSnet DI --job training course, Southampton, 25-28 January 2011. https://wayback.archive-.org/12090/20231221144450/https://cros-legacy.ec.europa.eu/content/job-training_en","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fictional census data — census","text":"","code":"data(\"census\") head(census) #>       person_id pername1 pername2    sex dob_day dob_mon dob_year hse_num #>          <char>   <char>   <char> <char>  <char>  <char>   <char>   <num> #> 1: DE03US001001    COUIE    PRICE      M       1       6     1960       1 #> 2: DE03US001002    ABBIE    PVICE      F       9      11     1961       1 #> 3: DE03US001003    LACEY    PRICE      F       7       2     1999       1 #> 4: DE03US001004   SAMUEL    PRICE      M      13       4     1990       1 #> 5: DE03US001005   JOSEPH    PRICE      M      20       4     1986       1 #> 6: DE03US001006     JOSH    PRICE      M      14       2     1996       1 #>           enumcap enumpc      str_nam         cap_add        census_id #>            <char> <char>       <char>          <char>           <char> #> 1: 1 WINDSOR ROAD DE03US Windsor Road 1, Windsor Road CENSDE03US001001 #> 2: 1 WINDSOR ROAD DE03US Windsor Road 1, Windsor Road CENSDE03US001002 #> 3: 1 WINDSOR ROAD DE03US Windsor Road 1, Windsor Road CENSDE03US001003 #> 4: 1 WINDSOR ROAD DE03US Windsor Road 1, Windsor Road CENSDE03US001004 #> 5: 1 WINDSOR ROAD DE03US Windsor Road 1, Windsor Road CENSDE03US001005 #> 6: 1 WINDSOR ROAD DE03US Windsor Road 1, Windsor Road CENSDE03US001006"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/cis.html","id":null,"dir":"Reference","previous_headings":"","what":"Fictional customer data — cis","title":"Fictional customer data — cis","text":"data set created Paula McLeod, Dick Heasman Ian Forbes, ONS, ESSnet DI --job training course, Southampton, 25-28 January 2011. contains fictional observations Customer Information System, combined administrative data tax benefit systems.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/cis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fictional customer data — cis","text":"","code":"cis"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/cis.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fictional customer data — cis","text":"data.table 24613 records. row represents one record, following columns: person_id – unique number person, consisting postcode, house number person number, pername1 – forename, pername2 – surname, sex – gender (M/F), dob_day – day birth, dob_mon – month birth, dob_year – year birth, enumcap – address consisting house number street name, enumpc – postcode, cis_id – person ID \"CIS\" added front.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/cis.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fictional customer data — cis","text":"McLeod, P., Heasman, D., Forbes, . (2011). Simulated data ESSnet DI --job training course, Southampton, 25-28 January 2011. https://wayback.archive-.org/12090/20231221144450/https://cros-legacy.ec.europa.eu/content/job-training_en","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/cis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fictional customer data — cis","text":"","code":"data(\"cis\") head(cis) #>        person_id pername1 pername2    sex dob_day dob_mon dob_year #>           <char>   <char>   <char> <char>  <char>  <char>   <char> #> 1: PO827ER091001   HAYDEN     HALL      M               1          #> 2: LS992DB024001    SEREN ANDERSON      F       1       1          #> 3:  M432ZZ053003    LEWIS    LEWIS      M       1       1          #> 4:  SW75TQ018001 HARRISON   POSTER      M       5       1          #> 5: EX527TR017006 MUHAMMED   WATSUN      M       7       1          #> 6: SW540RB001001     RHYS THOMPSON      M       7       1          #>               enumcap  enumpc           cis_id #>                <char>  <char>           <char> #> 1:   91 CLARENCE ROAD PO827ER CISPO827ER091001 #> 2:     24 CHURCH LANE LS992DB CISLS992DB024001 #> 3:     53 CHURCH ROAD  M432ZZ  CISM432ZZ053003 #> 4:  19 HIGHFIELD ROAD  SW75TG  CISSW75TQ018001 #> 5: 17 VICTORIA STREET         CISEX527TR017006 #> 6: 1 SPRINGFIELD ROAD SW540RB CISSW540RB001001"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_annoy.html","id":null,"dir":"Reference","previous_headings":"","what":"Controls for the Annoy algorithm — control_annoy","title":"Controls for the Annoy algorithm — control_annoy","text":"Controls Annoy algorithm used package (see RcppAnnoy details).","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_annoy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controls for the Annoy algorithm — control_annoy","text":"","code":"control_annoy(n_trees = 250, build_on_disk = FALSE, ...)"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_annoy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controls for the Annoy algorithm — control_annoy","text":"n_trees integer specifying number trees build Annoy index. build_on_disk logical value indicating whether build Annoy index disk instead memory. ... Additional arguments.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_annoy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Controls for the Annoy algorithm — control_annoy","text":"Returns list parameters.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_hnsw.html","id":null,"dir":"Reference","previous_headings":"","what":"Controls for the HNSW algorithm — control_hnsw","title":"Controls for the HNSW algorithm — control_hnsw","text":"Controls HNSW algorithm used package (see RcppHNSW::hnsw_build() RcppHNSW::hnsw_search() details).","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_hnsw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controls for the HNSW algorithm — control_hnsw","text":"","code":"control_hnsw(M = 25, ef_c = 200, ef_s = 200, grain_size = 1, byrow = TRUE, ...)"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_hnsw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controls for the HNSW algorithm — control_hnsw","text":"M Controls number bi-directional links created element index construction. ef_c Size dynamic list used construction. ef_s Size dynamic list used search. grain_size Minimum amount work (rows dataset add) per thread. byrow TRUE (default), indicates items dataset indexed stored row. Otherwise, items stored columns dataset. ... Additional arguments.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_hnsw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Controls for the HNSW algorithm — control_hnsw","text":"Returns list parameters.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_kd.html","id":null,"dir":"Reference","previous_headings":"","what":"Controls for the k-d tree algorithm — control_kd","title":"Controls for the k-d tree algorithm — control_kd","text":"Controls KD algorithm used package (see knn details).","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_kd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controls for the k-d tree algorithm — control_kd","text":"","code":"control_kd(   algorithm = \"dual_tree\",   epsilon = 0,   leaf_size = 20,   random_basis = FALSE,   rho = 0.7,   tau = 0,   tree_type = \"kd\",   ... )"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_kd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controls for the k-d tree algorithm — control_kd","text":"algorithm Type neighbor search: 'naive', 'single_tree', 'dual_tree', 'greedy'. epsilon specified, approximate nearest neighbor search given relative error. leaf_size Leaf size tree building (used kd-trees, vp trees, random projection trees, UB trees, R trees, R* trees, X trees, Hilbert R trees, R+ trees, R++ trees, spill trees, octrees). random_basis tree-building, project data onto random orthogonal basis. rho Balance threshold (valid spill trees). tau Overlapping size (valid spill trees). tree_type Type tree use: 'kd', 'vp', 'rp', 'max-rp', 'ub', 'cover', 'r', 'r-star', 'x', 'ball', 'hilbert-r', 'r-plus', 'r-plus-plus', 'spill', 'oct'. ... Additional arguments.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_kd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Controls for the k-d tree algorithm — control_kd","text":"Returns list parameters.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_lsh.html","id":null,"dir":"Reference","previous_headings":"","what":"Controls for the LSH algorithm — control_lsh","title":"Controls for the LSH algorithm — control_lsh","text":"Controls LSH algorithm used package (see lsh details).","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_lsh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controls for the LSH algorithm — control_lsh","text":"","code":"control_lsh(   bucket_size = 10,   hash_width = 6,   num_probes = 5,   projections = 10,   tables = 30,   ... )"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_lsh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controls for the LSH algorithm — control_lsh","text":"bucket_size size bucket second level hash. hash_width hash width first-level hashing LSH preprocessing. num_probes Number additional probes multiprobe LSH. projections number hash functions table. tables number hash tables used. ... Additional arguments.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_lsh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Controls for the LSH algorithm — control_lsh","text":"Returns list parameters.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_nnd.html","id":null,"dir":"Reference","previous_headings":"","what":"Controls for the NND algorithm — control_nnd","title":"Controls for the NND algorithm — control_nnd","text":"Controls NND algorithm used package (see rnnd_build rnnd_query details).","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_nnd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controls for the NND algorithm — control_nnd","text":"","code":"control_nnd(   k_build = 30,   use_alt_metric = FALSE,   init = \"tree\",   n_trees = NULL,   leaf_size = NULL,   max_tree_depth = 200,   margin = \"auto\",   n_iters = NULL,   delta = 0.001,   max_candidates = NULL,   low_memory = TRUE,   n_search_trees = 1,   pruning_degree_multiplier = 1.5,   diversify_prob = 1,   weight_by_degree = FALSE,   prune_reverse = FALSE,   progress = \"bar\",   obs = \"R\",   max_search_fraction = 1,   epsilon = 0.1,   ... )"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_nnd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controls for the NND algorithm — control_nnd","text":"k_build Number nearest neighbors build index . use_alt_metric TRUE, use faster metrics maintain ordering distances internally (e.g. squared Euclidean distances using metric = \"euclidean\"), apply correction end. init Name initialization strategy initial data neighbor graph optimize. n_trees number trees use RP forest. used init = \"tree\". leaf_size maximum number items can appear leaf. used init = \"tree\". max_tree_depth maximum depth tree build (default = 200). used init = \"tree\". margin character string specifying method used assign points one side hyperplane . n_iters Number iterations nearest neighbor descent carry . delta minimum relative change neighbor graph allowed early stopping. value 0 1. smaller value, smaller amount progress iterations allowed. max_candidates Maximum number candidate neighbors try item iteration. low_memory TRUE, use lower memory, computationally expensive approach index construction. set FALSE, see noticeable speed improvement, especially using smaller number threads, worth trying memory spare. n_search_trees number trees keep search forest part index preparation. default 1. pruning_degree_multiplier strongly truncate final neighbor list item. diversify_prob degree diversification search graph removing unnecessary edges occlusion pruning. weight_by_degree TRUE, candidates local join weighted according -degree, max_candidates candidate list, candidates smaller degree favored retention. prune_reverse TRUE, prune reverse neighbors item reverse graph diversification step using pruning_degree_multiplier. progress Determines type progress information logged nearest neighbor descent stage. obs set C indicate input data orientation stores observation column. default R means observations stored row. max_search_fraction Maximum fraction reference data search. epsilon Controls trade-accuracy search cost. ... Additional arguments.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/control_nnd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Controls for the NND algorithm — control_nnd","text":"Returns list parameters.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/controls_ann.html","id":null,"dir":"Reference","previous_headings":"","what":"Controls for approximate nearest neighbours algorithms — controls_ann","title":"Controls for approximate nearest neighbours algorithms — controls_ann","text":"Controls ANN algorithms used package.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/controls_ann.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controls for approximate nearest neighbours algorithms — controls_ann","text":"","code":"controls_ann(   sparse = FALSE,   k_search = 30,   nnd = control_nnd(),   hnsw = control_hnsw(),   lsh = control_lsh(),   kd = control_kd(),   annoy = control_annoy() )"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/controls_ann.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controls for approximate nearest neighbours algorithms — controls_ann","text":"sparse whether sparse data used input algorithms, k_search number neighbours search, nnd parameters rnnd_build rnnd_query (inside control_nnd function), hnsw parameters hnsw_build hnsw_search (inside control_hnsw function), lsh parameters lsh function (inside control_lsh function), kd kd parameters knn function (inside control_kd function), annoy parameters RcppAnnoy package (inside control_annoy function).","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/controls_ann.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Controls for approximate nearest neighbours algorithms — controls_ann","text":"Returns list parameters.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/controls_ann.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Controls for approximate nearest neighbours algorithms — controls_ann","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/controls_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"Controls for processing character data — controls_txt","title":"Controls for processing character data — controls_txt","text":"Controls text data used blocking function (representation = shingles), passed tokenize_character_shingles.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/controls_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controls for processing character data — controls_txt","text":"","code":"controls_txt(   n_shingles = 2L,   n_chunks = 10L,   lowercase = TRUE,   strip_non_alphanum = TRUE )"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/controls_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controls for processing character data — controls_txt","text":"n_shingles length shingles (default 2L), n_chunks passed (default 10L), lowercase characters made lower-case? (default TRUE), strip_non_alphanum punctuation white space stripped? (default TRUE).","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/controls_txt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Controls for processing character data — controls_txt","text":"Returns list parameters.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/controls_txt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Controls for processing character data — controls_txt","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/est_block_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate errors due to blocking in record linkage — est_block_error","title":"Estimate errors due to blocking in record linkage — est_block_error","text":"Function computes estimators false positive rate (FPR) false negative rate (FNR) due blocking record linkage, proposed Dasylva Goussanou (2021). Assumes duplicate-free data sources, complete coverage reference data set blocking decisions based solely record pairs.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/est_block_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate errors due to blocking in record linkage — est_block_error","text":"","code":"est_block_error(   x = NULL,   y = NULL,   blocking_result = NULL,   n = NULL,   N = NULL,   G,   alpha = NULL,   p = NULL,   lambda = NULL,   tol = 10^(-4),   maxiter = 100,   sample_size = NULL )"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/est_block_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate errors due to blocking in record linkage — est_block_error","text":"x Reference data (required n N provided). y Query data (required n provided). blocking_result data.frame data.table containing blocking results (required n provided). n Integer vector numbers accepted pairs formed record query data set records reference data set, based blocking criteria (NULL, derived blocking_result). N Total number records reference data set (NULL, derived length(x)). G Number classes finite mixture model. alpha Numeric vector initial class proportions (length G; NULL, initialized rep(1/G, G)). p Numeric vector initial matching probabilities class mixture model (length G; NULL, randomly initialized runif(G, 0.5, 1)). lambda Numeric vector initial Poisson distribution parameters non-matching records class mixture model (length G; NULL, randomly initialized runif(G, 0.1, 2)). tol Convergence tolerance EM algorithm (default 10^(-6)). maxiter Maximum number iterations EM algorithm (default 1000). sample_size Bootstrap sample (n) size used calculations (NULL, uses data).","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/est_block_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate errors due to blocking in record linkage — est_block_error","text":"Returns list containing: FPR – estimated false positive rate, FNR – estimated false negative rate, iter – number EM algorithm iterations performed, convergence – logical, indicating whether EM algorithm converged within maxiter iterations.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/est_block_error.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate errors due to blocking in record linkage — est_block_error","text":"Consider large finite population comprises \\(N\\) individuals, two duplicate-free data sources: register file. Assume register undercoverage, .e. record file corresponds exactly one record individual register. Let \\(n_i\\) denote number register records form accepted (blocking criteria) pair record \\(\\) file. Assume : two matched records neighbours probability bounded away \\(0\\) regardless \\(N\\), two unmatched records accidental neighbours probability \\(O(\\frac{1}{N})\\). finite mixture model \\(n_i \\sim \\sum_{g=1}^G \\alpha_g(\\text{Bernoulli}(p_g) \\ast \\text{Poisson}(\\lambda_g))\\) assumed. \\(G\\) fixed, unknown model parameters given vector \\(\\psi = [(\\alpha_g, p_g, \\lambda_g)]_{1 \\leq g \\leq G}\\) may estimated Expectation-Maximization (EM) procedure. Let \\(n_i = n_{|M} + n_{|U}\\), \\(n_{|M}\\) number matched neighbours \\(n_{|U}\\) number unmatched neighbours, let \\(c_{ig}\\) denote indicator record \\(\\) class \\(g\\). E-step EM procedure, equations follows $$ \\begin{aligned} P(n_i | c_{ig} = 1) &= (n_i = 0)(1-p_g)e^{-\\lambda_g}+(n_i > 0)\\Bigl(p_g+(1-p_g)\\frac{\\lambda_g}{n_i}\\Bigr)\\frac{e^{-\\lambda_g}\\lambda_g^{n_i-1}}{(n_i-1)!}, \\\\ P(c_{ig} = 1 | n_i) &= \\frac{\\alpha_gP(n_i | c_{ig} = 1)}{\\sum_{g'=1}^G\\alpha_{g'}P(n_i | c_{ig'} = 1)}, \\\\ P(n_{|M} = 1 | n_i,c_{ig} = 1) &= \\frac{p_gn_i}{p_gn_i + (1-p_g)\\lambda_g}, \\\\ P(n_{|U} = n_i | n_i,c_{ig} = 1) &= (n_i = 0) + (n_i > 0)\\frac{(1-p_g)\\lambda_g}{p_gn_i + (1-p_g)\\lambda_g}, \\\\ P(n_{|U} = n_i-1 | n_i,c_{ig} = 1) &= \\frac{p_gn_i}{p_gn_i + (1-p_g)\\lambda_g}, \\\\ E[c_{ig}n_{|M} | n_i] &= P(c_{ig} = 1 | n_i)P(n_{|M} = 1 | n_i,c_{ig} = 1), \\\\ E[n_{|U} | n_i,c_{ig} = 1] &= \\Bigl(\\frac{p_g(n_i-1) + (1-p_g)\\lambda_g}{p_gn_i + (1-p_g)\\lambda_g}\\Bigr)n_i, \\\\ E[c_{ig}n_{|U} | n_i] &= P(c_{ig} = 1 | n_i)E[n_{|U} | n_i,c_{ig} = 1]. \\end{aligned} $$ M-step given following equations $$ \\begin{aligned} \\hat{p}_g &= \\frac{\\sum_{=1}^[c_{ig}n_{|M} | n_i;\\psi]}{\\sum_{=1}^[c_{ig} | n_i; \\psi]}, \\\\ \\hat{\\lambda}_g &= \\frac{\\sum_{=1}^[c_{ig}n_{|U} | n_i; \\psi]}{\\sum_{=1}^[c_{ig} | n_i; \\psi]}, \\\\ \\hat{\\alpha}_g &= \\frac{1}{m}\\sum_{=1}^[c_{ig} | n_i; \\psi]. \\end{aligned} $$ \\(N \\\\infty\\), error rates model parameters related follows $$ \\begin{aligned} \\text{FNR} &\\xrightarrow{p} 1 - E[p(v_i)], \\\\ (N-1)\\text{FPR} &\\xrightarrow{p} E[\\lambda(v_i)], \\end{aligned} $$ \\(E[p(v_i)] = \\sum_{g=1}^G\\alpha_gp_g\\) \\(E[\\lambda(v_i)] = \\sum_{g=1}^G\\alpha_g\\lambda_g\\).","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/est_block_error.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate errors due to blocking in record linkage — est_block_error","text":"Dasylva, ., Goussanou, . (2021). Estimating false negatives due blocking record linkage. Survey Methodology, Statistics Canada, Catalogue . 12-001-X, Vol. 47, . 2. Dasylva, ., Goussanou, . (2022). consistent estimation linkage errors without training data. Jpn J Stat Data Sci 5, 181–216. doi:10.1007/s42081-022-00153-3","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/est_block_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate errors due to blocking in record linkage — est_block_error","text":"","code":"## an example proposed by Dasylva and Goussanou (2021) ## we obtain results very close to those reported in the paper  set.seed(111)  neighbors <- rep(0:5, c(1659, 53951, 6875, 603, 62, 5))  errors <- est_block_error(n = neighbors,                           N = 63155,                           G = 2,                           tol = 10^(-3),                           maxiter = 50)  errors #> FPR:  2.137919e-06  #> FNR:  0.03006997  #> ======================================================== #> EM algorithm converged successfully within 9 iterations."},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/foreigners.html","id":null,"dir":"Reference","previous_headings":"","what":"Fictional 2024 population of foreigners in Poland — foreigners","title":"Fictional 2024 population of foreigners in Poland — foreigners","text":"fictional data set foreign population Poland, generated based publicly available information maintaining distributions administrative registers.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/foreigners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fictional 2024 population of foreigners in Poland — foreigners","text":"","code":"foreigners"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/foreigners.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fictional 2024 population of foreigners in Poland — foreigners","text":"data.table 110000 records. row represents one record, following columns: fname – first name, sname – second name, surname – surname, date – date birth, region – region (county), country – country, true_id – person ID.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/foreigners.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fictional 2024 population of foreigners in Poland — foreigners","text":"","code":"data(\"foreigners\") head(foreigners) #>     fname  sname    surname       date region country true_id #>    <char> <char>     <char>     <char> <char>  <char>   <num> #> 1:   emin            imanov 1998/02/05            031       0 #> 2: nurlan        suleymanli 2000/08/01            031       1 #> 3:   amio        maharrsmov 1939/03/08            031       2 #> 4:   amik        maharramof 1939/03/08            031       2 #> 5:   amil        maharramov 1993/03/08            031       2 #> 6:  gadir        jahangirov 1991/08/29            031       3"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_annoy.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","title":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","text":"See details RcppAnnoy package.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_annoy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","text":"","code":"method_annoy(x, y, k, distance, verbose, path, seed, control)"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_annoy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","text":"x deduplication reference data, y query data, k number neighbours return, distance distance metric, verbose TRUE, log messages console, path path write index, seed seed pseudo-random numbers algorithm, control controls new build methods RcppAnnoy.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_annoy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_hnsw.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function to use HNSW algorithm via the RcppHNSW package. — method_hnsw","title":"An internal function to use HNSW algorithm via the RcppHNSW package. — method_hnsw","text":"See details hnsw_build hnsw_search.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_hnsw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function to use HNSW algorithm via the RcppHNSW package. — method_hnsw","text":"","code":"method_hnsw(x, y, k, distance, verbose, n_threads, path, control, seed)"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_hnsw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function to use HNSW algorithm via the RcppHNSW package. — method_hnsw","text":"x deduplication reference data, y query data, k number neighbours return, distance type distance calculate, verbose TRUE, log messages console, n_threads Maximum number threads use, path path write index, control controls HNSW algorithm.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_hnsw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An internal function to use HNSW algorithm via the RcppHNSW package. — method_hnsw","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_mlpack.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function to use the LSH and KD-tree algorithm via the mlpack package. — method_mlpack","title":"An internal function to use the LSH and KD-tree algorithm via the mlpack package. — method_mlpack","text":"See details lsh knn.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_mlpack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function to use the LSH and KD-tree algorithm via the mlpack package. — method_mlpack","text":"","code":"method_mlpack(x, y, algo = c(\"lsh\", \"kd\"), k, verbose, seed, path, control)"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_mlpack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function to use the LSH and KD-tree algorithm via the mlpack package. — method_mlpack","text":"x deduplication reference data, y query data, algo algorithm used: lsh kd, k number neighbours return, verbose TRUE, log messages console, seed seed pseudo-random numbers algorithm, path path write index, control controls lsh kd algorithms.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_mlpack.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An internal function to use the LSH and KD-tree algorithm via the mlpack package. — method_mlpack","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_nnd.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function to use the NN descent algorithm via the rnndescent package. — method_nnd","title":"An internal function to use the NN descent algorithm via the rnndescent package. — method_nnd","text":"See details rnnd_build rnnd_query.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_nnd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function to use the NN descent algorithm via the rnndescent package. — method_nnd","text":"","code":"method_nnd(x, y, k, distance, deduplication, verbose, n_threads, control, seed)"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_nnd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function to use the NN descent algorithm via the rnndescent package. — method_nnd","text":"x deduplication reference data, y query data, k number neighbours return, distance type distance calculate, deduplication whether deduplication applied, verbose TRUE, log messages console, n_threads maximum number threads use, control controls NN descent algorithm.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/method_nnd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An internal function to use the NN descent algorithm via the rnndescent package. — method_nnd","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/pair_ann.html","id":null,"dir":"Reference","previous_headings":"","what":"Integration with the reclin2 package — pair_ann","title":"Integration with the reclin2 package — pair_ann","text":"Function integration reclin2 package. function based pair_minsim reuses source code.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/pair_ann.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integration with the reclin2 package — pair_ann","text":"","code":"pair_ann(   x,   y = NULL,   on,   deduplication = TRUE,   keep_block = TRUE,   add_xy = TRUE,   ... )"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/pair_ann.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integration with the reclin2 package — pair_ann","text":"x reference data (data.frame data.table), y query data  (data.frame data.table, default NULL), character column name character vector column names ANN search, deduplication whether deduplication performed (default TRUE), keep_block whether keep block variable set, add_xy whether add x y, ... arguments passed blocking function.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/pair_ann.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integration with the reclin2 package — pair_ann","text":"Returns data.table two columns .x .y. Columns .x .y row numbers data.frames x y respectively. Returned data.table also class pairs allows integration compare_pairs function.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/pair_ann.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Integration with the reclin2 package — pair_ann","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/pair_ann.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integration with the reclin2 package — pair_ann","text":"","code":"# example using two datasets from reclin2  # \\donttest{ if (requireNamespace(\"reclin2\", quietly = TRUE)) {  library(reclin2) data(\"linkexample1\", \"linkexample2\", package = \"reclin2\")  linkexample1$txt <- with(linkexample1, tolower(paste0(firstname, lastname, address, sex, postcode))) linkexample1$txt <- gsub(\"\\\\s+\", \"\", linkexample1$txt) linkexample2$txt <- with(linkexample2, tolower(paste0(firstname, lastname, address, sex, postcode))) linkexample2$txt <- gsub(\"\\\\s+\", \"\", linkexample2$txt)  # pairing records from linkexample2 to linkexample1 based on txt column  pair_ann(x = linkexample1, y = linkexample2, on = \"txt\", deduplication = FALSE) |> compare_pairs(on = \"txt\", comparators = list(cmp_jarowinkler())) |> score_simple(\"score\", on = \"txt\") |> select_threshold(\"threshold\", score = \"score\", threshold = 0.75) |> link(selection = \"threshold\") } #> Loading required package: data.table #>   Total number of pairs: 5 pairs #>  #> Key: <.y> #>       .y    .x  id.x lastname.x firstname.x  address.x  sex.x postcode.x #>    <int> <int> <int>     <fctr>      <fctr>     <fctr> <fctr>     <fctr> #> 1:     1     2     2      Smith      George 12 Mainstr      M    1234 AB #> 2:     2     3     3    Johnson        Anna 61 Mainstr      F    1234 AB #> 3:     3     4     4    Johnson     Charles 61 Mainstr      M    1234 AB #> 4:     4     6     6   Schwartz         Ben  1 Eaststr      M    6789 XY #> 5:     5     6     6   Schwartz         Ben  1 Eaststr      M    6789 XY #>                             txt.x  id.y lastname.y firstname.y     address.y #>                            <char> <int>     <fctr>      <fctr>        <fctr> #> 1:    georgesmith12mainstrm1234ab     2      Smith      Gearge 12 Mainstreet #> 2:    annajohnson61mainstrf1234ab     3     Jonson          A. 61 Mainstreet #> 3: charlesjohnson61mainstrm1234ab     4    Johnson     Charles    61 Mainstr #> 4:     benschwartz1eaststrm6789xy     6   Schwartz         Ben        1 Main #> 5:     benschwartz1eaststrm6789xy     7   Schwartz        Anna     1 Eaststr #>     sex.y postcode.y                           txt.y #>    <fctr>     <fctr>                          <char> #> 1:   <NA>    1234 AB geargesmith12mainstreetna1234ab #> 2:      F    1234 AB     a.jonson61mainstreetf1234ab #> 3:      F    1234 AB  charlesjohnson61mainstrf1234ab #> 4:      M    6789 XY         benschwartz1mainm6789xy #> 5:      F    6789 XY     annaschwartz1eaststrf6789xy # }"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/sentence_to_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Sentence to vector — sentence_to_vector","title":"Sentence to vector — sentence_to_vector","text":"Function creates matrix word embeddings using given model.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/sentence_to_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sentence to vector — sentence_to_vector","text":"","code":"sentence_to_vector(sentences, model)"},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/reference/sentence_to_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sentence to vector — sentence_to_vector","text":"sentences character vector, model matrix containing word embeddings (e.g., GloVe).","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/news/index.html","id":"version-100","dir":"Changelog","previous_headings":"","what":"version 1.0.0","title":"version 1.0.0","text":"Added support word embeddings. Updated controls ANN algorithms. Updated evaluation metrics. Added 4 data sets. Added 2 new vignettes. Added estimators FPR FNR due blocking record linkage, proposed Dasylva Goussanou (2021). Updated examples documentation.","code":""},{"path":"https://ncn-foreigners.ue.poznan.pl/blocking/news/index.html","id":"version-010","dir":"Changelog","previous_headings":"","what":"version 0.1.0","title":"version 0.1.0","text":"Supports following packages: RcppHNSW, mlpack RcppAnnoy. Supports blocking deduplication record linkage. Metrics true blocking known based igraph::compare. Testing tinytest package. Initial support reclin2 package. Class blocking introduced. S3method printing. First vignette added. Evaluation standard metrics (recall, fpr, etc.) added, works vector deduplication. Added saving index hnsw annoy. rnndescend support added.","code":""}]
