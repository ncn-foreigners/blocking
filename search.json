[{"path":"https://ncn-foreigners.github.io/blocking/articles/v1-deduplication.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Blocking records for deduplication","text":"Read required packages Read RLdata500 data used RecordLinkage package dblink Github repository. dataset contains 500 450 entities.","code":"library(blocking) library(reclin2) library(data.table) df <- read.csv(\"https://raw.githubusercontent.com/cleanzr/dblink/dc3dd0daf55f8a303863423817a0f0042b3c275a/examples/RLdata500.csv\") setDT(df) head(df) #>    fname_c1 fname_c2 lname_c1 lname_c2   by bm bd rec_id ent_id #> 1:  CARSTEN     <NA>    MEIER     <NA> 1949  7 22      1     34 #> 2:     GERD     <NA>    BAUER     <NA> 1968  7 27      2     51 #> 3:   ROBERT     <NA> HARTMANN     <NA> 1930  4 30      3    115 #> 4:   STEFAN     <NA>    WOLFF     <NA> 1957  9  2      4    189 #> 5:     RALF     <NA>  KRUEGER     <NA> 1966  1 13      5     72 #> 6:  JUERGEN     <NA>   FRANKE     <NA> 1929  7  4      6    142"},{"path":"https://ncn-foreigners.github.io/blocking/articles/v1-deduplication.html","id":"blocking-for-deduplication","dir":"Articles","previous_headings":"","what":"Blocking for deduplication","title":"Blocking records for deduplication","text":"Now create new column concatenates information row. next step use newly created column blocking function. specify verbose, get information progress. Results follows: based RcppHNSW created 133 blocks, based 429 columns (2 character shingles), 46 blocks 2 elements, 43 blocks 3 elements, …, 1 block 17 elements. Structure object follows: result - data.table identifiers block IDs, method - method used, metrics - based igraph::compare methods comparing graphs (NULL), colnames - column names used comparison. resulting data.table three columns: x - Reference dataset (.e. df) – may contain units df, y - query (row df) – return units df, block – block ID. add block information final dataset. Finally, can check many blocks entities (ent_id) observed. example, entities blocks.","code":"df[, id_count :=.N, ent_id] ## how many times given unit occurs df[is.na(fname_c2), fname_c2:=\"\"] df[is.na(lname_c2), lname_c2:=\"\"] df[, bm:=sprintf(\"%02d\", bm)] ## add leading zeros to month df[, bd:=sprintf(\"%02d\", bd)] ## add leading zeros to month df[, txt:=tolower(paste0(fname_c1,fname_c2,lname_c1,lname_c2,by,bm,bd))] head(df) #>    fname_c1 fname_c2 lname_c1 lname_c2   by bm bd rec_id ent_id id_count #> 1:  CARSTEN             MEIER          1949 07 22      1     34        1 #> 2:     GERD             BAUER          1968 07 27      2     51        2 #> 3:   ROBERT          HARTMANN          1930 04 30      3    115        1 #> 4:   STEFAN             WOLFF          1957 09 02      4    189        1 #> 5:     RALF           KRUEGER          1966 01 13      5     72        1 #> 6:  JUERGEN            FRANKE          1929 07 04      6    142        1 #>                       txt #> 1:   carstenmeier19490722 #> 2:      gerdbauer19680727 #> 3: roberthartmann19300430 #> 4:    stefanwolff19570902 #> 5:    ralfkrueger19660113 #> 6:  juergenfranke19290704 df_blocks <- blocking(x = df$txt, ann = \"hnsw\", verbose=TRUE) #> ===== creating tokens ===== #> ===== starting search (hnsw, x, y: 500, 500, t: 429) ===== #> ===== creating graph ===== df_blocks #> ======================================================== #> Blocking based on the hnsw method. #> Number of blocks: 133. #> Number of columns used for blocking: 429. #> Reduction ratio: 0.9916. #> ======================================================== #> Distribution of the size of the blocks: #>  2  3  4  5  6  7  8  9 11 13 17  #> 45 35 23 10  5  7  2  3  1  1  1 str(df_blocks,1) #> List of 4 #>  $ result  :Classes 'data.table' and 'data.frame':   500 obs. of  3 variables: #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ method  : chr \"hnsw\" #>  $ metrics : NULL #>  $ colnames: chr [1:429] \"86\" \"ap\" \"av\" \"bf\" ... #>  - attr(*, \"class\")= chr \"blocking\" head(df_blocks$result) #>    x   y block #> 1: 2  43     2 #> 2: 2 486     2 #> 3: 5 128     5 #> 4: 5 439     5 #> 5: 7  20     6 #> 6: 7  28     6 df_block_result <- copy(df_blocks$result[order(y),]) df[, block_id := df_block_result$block] head(df) #>    fname_c1 fname_c2 lname_c1 lname_c2   by bm bd rec_id ent_id id_count #> 1:  CARSTEN             MEIER          1949 07 22      1     34        1 #> 2:     GERD             BAUER          1968 07 27      2     51        2 #> 3:   ROBERT          HARTMANN          1930 04 30      3    115        1 #> 4:   STEFAN             WOLFF          1957 09 02      4    189        1 #> 5:     RALF           KRUEGER          1966 01 13      5     72        1 #> 6:  JUERGEN            FRANKE          1929 07 04      6    142        1 #>                       txt block_id #> 1:   carstenmeier19490722        1 #> 2:      gerdbauer19680727        2 #> 3: roberthartmann19300430        3 #> 4:    stefanwolff19570902        4 #> 5:    ralfkrueger19660113        5 #> 6:  juergenfranke19290704        1 df[, .(uniq_blocks = uniqueN(block_id)), .(ent_id)][, .N, uniq_blocks] #>    uniq_blocks   N #> 1:           1 450"},{"path":"https://ncn-foreigners.github.io/blocking/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maciej Beręsewicz. Author, maintainer.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beręsewicz M (2023). blocking: Blocking records record linkage / data deduplication. R package version 0.1.0, https://ncn-foreigners.github.io/blocking/, https://github.com/ncn-foreigners/blocking.","code":"@Manual{,   title = {blocking: Blocking records for record linkage / data deduplication},   author = {Maciej Beręsewicz},   year = {2023},   note = {R package version 0.1.0, https://ncn-foreigners.github.io/blocking/},   url = {https://github.com/ncn-foreigners/blocking}, }"},{"path":[]},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Blocking records for record linkage / data deduplication","text":"small package used block records data deduplication record linkage (entity resolution) based approximate nearest neighbours algorithms (ANN) graphs (via igraph). Currently supports following R packages binds specific ANN algorithms RcppHNSW, RcppAnnoy, mlpack (see mlpack::lsh mlpack::knn). package also supports integration reclin2 package via blocking::pair_ann function.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Blocking records for record linkage / data deduplication","text":"Work package supported National Science Centre, OPUS 22 grant . 2020/39/B/HS4/00941.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Blocking records for record linkage / data deduplication","text":"can install development version blocking GitHub :","code":"# install.packages(\"remotes\") # uncomment if needed remotes::install_github(\"ncn-foreigners/blocking\")"},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Blocking records for record linkage / data deduplication","text":"Load packages examples Generate simple data two groups. Deduplication using blocking Table blocking Deduplication followed reclin2 package Record linkage","code":"library(blocking) library(reclin2) #> Loading required package: data.table #>  #> Attaching package: 'reclin2' #> The following object is masked from 'package:base': #>  #>     identical df_example <- data.frame(txt = c(   \"jankowalski\",   \"kowalskijan\",   \"kowalskimjan\",   \"kowaljan\",   \"montypython\",   \"pythonmonty\",   \"cyrkmontypython\",   \"monty\" )) df_base <- data.frame(txt = c(\"montypython\", \"kowalskijan\"))  df_example #>               txt #> 1     jankowalski #> 2     kowalskijan #> 3    kowalskimjan #> 4        kowaljan #> 5     montypython #> 6     pythonmonty #> 7 cyrkmontypython #> 8           monty  df_base #>           txt #> 1 montypython #> 2 kowalskijan blocking_result <- blocking(x = df_example$txt) #> 'as(<dgTMatrix>, \"dgCMatrix\")' is deprecated. #> Use 'as(., \"CsparseMatrix\")' instead. #> See help(\"Deprecated\") and help(\"Matrix-deprecated\"). ## data frame with indices and block  blocking_result #> ======================================================== #> Blocking based on the hnsw method. #> Number of blocks: 2. #> Number of columns used for blocking: 28. #> Reduction ratio: 0.57. #> ======================================================== #> Distribution of the size of the blocks: #> 4  #> 2 blocking_result$result #>        x     y block #>    <int> <int> <num> #> 1:     1     2     1 #> 2:     2     1     1 #> 3:     2     3     1 #> 4:     2     4     1 #> 5:     5     6     2 #> 6:     5     7     2 #> 7:     5     8     2 #> 8:     6     5     2 pair_ann(x = df_example, on = \"txt\") |>   compare_pairs(on = \"txt\", comparators = list(cmp_jarowinkler())) |>   score_simple(\"score\", on = \"txt\") |>   select_threshold(\"threshold\", score = \"score\", threshold = 0.55) |>   link(selection = \"threshold\") #>   Total number of pairs: 10 pairs #>  #> Key: <.y> #>        .y    .x       txt.x           txt.y #>     <int> <int>      <char>          <char> #>  1:     2     1 jankowalski     kowalskijan #>  2:     3     1 jankowalski    kowalskimjan #>  3:     3     2 kowalskijan    kowalskimjan #>  4:     4     1 jankowalski        kowaljan #>  5:     4     2 kowalskijan        kowaljan #>  6:     6     5 montypython     pythonmonty #>  7:     7     5 montypython cyrkmontypython #>  8:     7     6 pythonmonty cyrkmontypython #>  9:     8     5 montypython           monty #> 10:     8     6 pythonmonty           monty pair_ann(x = df_base, y = df_example, on = \"txt\", deduplication = FALSE) |>   compare_pairs(on = \"txt\", comparators = list(cmp_jarowinkler())) |>   score_simple(\"score\", on = \"txt\") |>   select_threshold(\"threshold\", score = \"score\", threshold = 0.55) |>   link(selection = \"threshold\") #>   Total number of pairs: 8 pairs #>  #> Key: <.y> #>       .y    .x       txt.x           txt.y #>    <int> <int>      <char>          <char> #> 1:     1     2 kowalskijan     jankowalski #> 2:     2     2 kowalskijan     kowalskijan #> 3:     3     2 kowalskijan    kowalskimjan #> 4:     4     2 kowalskijan        kowaljan #> 5:     5     1 montypython     montypython #> 6:     6     1 montypython     pythonmonty #> 7:     7     1 montypython cyrkmontypython #> 8:     8     1 montypython           monty"},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"see-also","dir":"","previous_headings":"","what":"See also","title":"Blocking records for record linkage / data deduplication","text":"See section Data Integration (Statistical Matching Record Linkage) Official Statistics Task View. Packages allow blocking: klsh – k-means locality sensitive hashing, reclin2 – pair_blocking, pari_minsim functions, fastLink – blockData function.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function for blocking records given text data — blocking","title":"Main function for blocking records given text data — blocking","text":"Function creates shingles (strings 2 characters), applies approximate nearest neighbour search using RcppHNSW, RcppAnnoy mlpack creates blocks using igraph.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function for blocking records given text data — blocking","text":"","code":"blocking(   x,   y = NULL,   deduplication = TRUE,   block = NULL,   ann = c(\"hnsw\", \"lsh\", \"annoy\", \"kd\"),   distance = c(\"cosine\", \"euclidean\", \"l2\", \"ip\", \"manhatan\", \"hamming\", \"angular\"),   ann_read = NULL,   ann_save = NULL,   true_blocks = NULL,   verbose = c(0, 1, 2),   n_threads = 1,   seed = 2023,   control_txt = controls_txt(),   control_ann = controls_ann() )"},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function for blocking records given text data — blocking","text":"x reference data (character vector matrix), y query data, provided NULL default, deduplication whether deduplication applied (default TRUE y set NULL), block initial blocking reduce comparisons (currently supported), ann algorithm used searching ann (possible, c(\"hnsw\", \"lsh\", \"annoy\", \"kd\"), default \"hnsw\"), distance distance metric (default cosine), ann_read reading index file (currently supported), ann_save saving index file. Two files created: 1) index, 2) column names (currently supported), true_blocks matrix true blocks calculate evaluation metrics (metrics igraph::compare() returned). verbose whether log provided (0 = none, 1 = main, 2 = ann algorithms), n_threads number threads used ann, seed seed algorithms, control_txt list controls text data, control_ann list controls ann algorithms.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function for blocking records given text data — blocking","text":"Returns list containing: result -- data.frame indices (rows) x, y block ann -- name ann algorithm used, metrics -- metrics, true_blocks provided, colnames -- variable names (colnames) used search.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main function for blocking records given text data — blocking","text":"Imports","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Main function for blocking records given text data — blocking","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function for blocking records given text data — blocking","text":"","code":"## general example df_example <- data.frame(txt = c(\"jankowalski\", \"kowalskijan\", \"kowalskimjan\", \"kowaljan\", \"montypython\", \"pythonmonty\", \"cyrkmontypython\", \"monty\"))  result <- blocking(x = df_example$txt,                    ann = \"hnsw\",                    control_ann = controls_ann(hnsw = list(M = 5, ef_c = 10, ef_s = 10))) #> 'as(<dgTMatrix>, \"dgCMatrix\")' is deprecated. #> Use 'as(., \"CsparseMatrix\")' instead. #> See help(\"Deprecated\") and help(\"Matrix-deprecated\").  result #> ======================================================== #> Blocking based on the hnsw method. #> Number of blocks: 2. #> Number of columns used for blocking: 28. #> Reduction ratio: 0.5714. #> ======================================================== #> Distribution of the size of the blocks: #> 4  #> 2   ## an example with true blocks"},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_ann.html","id":null,"dir":"Reference","previous_headings":"","what":"Controls for approximate nearest neighbours algoritms — controls_ann","title":"Controls for approximate nearest neighbours algoritms — controls_ann","text":"Controls ANN algorithms used package","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_ann.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controls for approximate nearest neighbours algoritms — controls_ann","text":"","code":"controls_ann(   hnsw = list(M = 25, ef_c = 200, ef_s = 200, grain_size = 1, byrow = TRUE),   lsh = list(bucket_size = 500, hash_width = 10, num_probes = 0, projections = 10, tables     = 30),   annoy = list(n_trees = 250),   kd = list(algorithm = \"dual_tree\", epsilon = 0, leaf_size = 20, random_basis = FALSE,     rho = 0.7, tau = 0, tree_type = \"kd\") )"},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_ann.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controls for approximate nearest neighbours algoritms — controls_ann","text":"hnsw parameters RcppHNSW::hnsw_build() RcppHNSW::hnsw_search(). lsh parameters mlpack::lsh(). annoy parameters RcppAnnoy package. kd parameters mlpack::knn() function.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_ann.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Controls for approximate nearest neighbours algoritms — controls_ann","text":"Returns list parameters","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_ann.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Controls for approximate nearest neighbours algoritms — controls_ann","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"Controls for text data — controls_txt","title":"Controls for text data — controls_txt","text":"Controls text data used blocking functions","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controls for text data — controls_txt","text":"","code":"controls_txt(n_shingles = 2L, n_chunks = 10L)"},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controls for text data — controls_txt","text":"n_shingles length shingles (default 2L), passed tokenizers::tokenize_character_shingles, n_chunks passed (default 10L) tokenizers::tokenize_character_shingles.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_txt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Controls for text data — controls_txt","text":"Returns list parameters.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_txt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Controls for text data — controls_txt","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_annoy.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function to use Annoy algorithm via RcppAnnoy. — method_annoy","title":"An internal function to use Annoy algorithm via RcppAnnoy. — method_annoy","text":"See details RcppAnnoy package.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_annoy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function to use Annoy algorithm via RcppAnnoy. — method_annoy","text":"","code":"method_annoy(x, y, k, distance, verbose, seed, control)"},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_annoy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function to use Annoy algorithm via RcppAnnoy. — method_annoy","text":"x Deduplication reference data. y Query data. k Number neighbors return. distance distance metric verbose TRUE, log messages console. seed seed pseudo-random numbers algorithm. control controls  lsh kd.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_annoy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An internal function to use Annoy algorithm via RcppAnnoy. — method_annoy","text":"Imports","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_annoy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An internal function to use Annoy algorithm via RcppAnnoy. — method_annoy","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_hnsw.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function to use hnsw algorithm via RcppHNSW. — method_hnsw","title":"An internal function to use hnsw algorithm via RcppHNSW. — method_hnsw","text":"See details RcppHNSW::hnsw_build RcppHNSW::hnsw_search","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_hnsw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function to use hnsw algorithm via RcppHNSW. — method_hnsw","text":"","code":"method_hnsw(x, y, k, distance, verbose, n_threads, control)"},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_hnsw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function to use hnsw algorithm via RcppHNSW. — method_hnsw","text":"x Deduplication reference data. y Query data. k Number neighbors return. distance Type distance calculate. verbose TRUE, log messages console. n_threads Maximum number threads use. control Controls HNSW algorithm","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_hnsw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An internal function to use hnsw algorithm via RcppHNSW. — method_hnsw","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_mlpack.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function to use algorthms from the mlpack package. — method_mlpack","title":"An internal function to use algorthms from the mlpack package. — method_mlpack","text":"See details mlpack::lsh mlpack::knn","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_mlpack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function to use algorthms from the mlpack package. — method_mlpack","text":"","code":"method_mlpack(x, y, algo = c(\"lsh\", \"kd\"), k, verbose, seed, control)"},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_mlpack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function to use algorthms from the mlpack package. — method_mlpack","text":"x Deduplication reference data. y Query data. algo algorithm used. Possible: lsh kd. k Number neighbors return. verbose TRUE, log messages console. seed seed pseudo-random numbers algorithm. control controls  lsh kd.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_mlpack.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An internal function to use algorthms from the mlpack package. — method_mlpack","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":null,"dir":"Reference","previous_headings":"","what":"Integration with the reclin2 package — pair_ann","title":"Integration with the reclin2 package — pair_ann","text":"Function integration reclin2 package. function based reclin2::pair_minsim() reuses source code.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integration with the reclin2 package — pair_ann","text":"","code":"pair_ann(   x,   y = NULL,   on,   deduplication = TRUE,   keep_block = TRUE,   add_xy = TRUE,   ... )"},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integration with the reclin2 package — pair_ann","text":"x x y y variable deduplication deduplication keep_block whether keep block set add_xy whether add x y ... arguments passed blocking() function.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integration with the reclin2 package — pair_ann","text":"Returns data.table two columns .x .y. Columns .x .y row numbers data.frames x y respectively. data.table also class pairs allows integration witn reclin2::compare_pairs() package.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integration with the reclin2 package — pair_ann","text":"Imports","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Integration with the reclin2 package — pair_ann","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integration with the reclin2 package — pair_ann","text":"","code":"# example using two datasets from reclin2  library(reclin2) #> Loading required package: data.table #>  #> Attaching package: ‘reclin2’ #> The following object is masked from ‘package:base’: #>  #>     identical  data(\"linkexample1\", \"linkexample2\", package = \"reclin2\")  linkexample1$txt <- with(linkexample1, tolower(paste0(firstname, lastname, address, sex, postcode))) linkexample1$txt <- gsub(\"\\\\s+\", \"\", linkexample1$txt) linkexample2$txt <- with(linkexample2, tolower(paste0(firstname, lastname, address, sex, postcode))) linkexample2$txt <- gsub(\"\\\\s+\", \"\", linkexample2$txt)  # pairing records from linkexample2 to linkexample1 based on txt column  pair_ann(x = linkexample1, y = linkexample2, on = \"txt\", deduplication = FALSE) |> compare_pairs(on = \"txt\", comparators = list(cmp_jarowinkler())) |> score_simple(\"score\", on = \"txt\") |> select_threshold(\"threshold\", score = \"score\", threshold = 0.75) |> link(selection = \"threshold\") #>   Total number of pairs: 5 pairs #>  #>    .y .x id.x lastname.x firstname.x  address.x sex.x postcode.x #> 1:  1  2    2      Smith      George 12 Mainstr     M    1234 AB #> 2:  2  3    3    Johnson        Anna 61 Mainstr     F    1234 AB #> 3:  3  4    4    Johnson     Charles 61 Mainstr     M    1234 AB #> 4:  4  6    6   Schwartz         Ben  1 Eaststr     M    6789 XY #> 5:  5  6    6   Schwartz         Ben  1 Eaststr     M    6789 XY #>                             txt.x id.y lastname.y firstname.y     address.y #> 1:    georgesmith12mainstrm1234ab    2      Smith      Gearge 12 Mainstreet #> 2:    annajohnson61mainstrf1234ab    3     Jonson          A. 61 Mainstreet #> 3: charlesjohnson61mainstrm1234ab    4    Johnson     Charles    61 Mainstr #> 4:     benschwartz1eaststrm6789xy    6   Schwartz         Ben        1 Main #> 5:     benschwartz1eaststrm6789xy    7   Schwartz        Anna     1 Eaststr #>    sex.y postcode.y                           txt.y #> 1:  <NA>    1234 AB geargesmith12mainstreetna1234ab #> 2:     F    1234 AB     a.jonson61mainstreetf1234ab #> 3:     F    1234 AB  charlesjohnson61mainstrf1234ab #> 4:     M    6789 XY         benschwartz1mainm6789xy #> 5:     F    6789 XY     annaschwartz1eaststrf6789xy"},{"path":"https://ncn-foreigners.github.io/blocking/news/index.html","id":"version-010","dir":"Changelog","previous_headings":"","what":"version 0.1.0","title":"version 0.1.0","text":"supports following packages: RcppHNSW, mlpack RcppAnnoy. supports blocking deduplication record linkage. metrics true blocking known based igraph::compare. testing tinytest package. initial support reclin2 package. class blocking introduced. s3method printing. first vignette added.","code":""}]
