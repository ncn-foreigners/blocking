[{"path":"https://ncn-foreigners.github.io/blocking/articles/v1-deduplication.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Blocking records for deduplication","text":"Read required packages Read RLdata500 data RecordLinkage package dblink Github repository. dataset contains 500 450 entities.","code":"library(blocking) library(reclin2) library(data.table) df <- read.csv(\"https://raw.githubusercontent.com/cleanzr/dblink/dc3dd0daf55f8a303863423817a0f0042b3c275a/examples/RLdata500.csv\") setDT(df) head(df) #>    fname_c1 fname_c2 lname_c1 lname_c2    by    bm    bd rec_id ent_id #>      <char>   <char>   <char>   <char> <int> <int> <int>  <int>  <int> #> 1:  CARSTEN     <NA>    MEIER     <NA>  1949     7    22      1     34 #> 2:     GERD     <NA>    BAUER     <NA>  1968     7    27      2     51 #> 3:   ROBERT     <NA> HARTMANN     <NA>  1930     4    30      3    115 #> 4:   STEFAN     <NA>    WOLFF     <NA>  1957     9     2      4    189 #> 5:     RALF     <NA>  KRUEGER     <NA>  1966     1    13      5     72 #> 6:  JUERGEN     <NA>   FRANKE     <NA>  1929     7     4      6    142"},{"path":"https://ncn-foreigners.github.io/blocking/articles/v1-deduplication.html","id":"blocking-for-deduplication","dir":"Articles","previous_headings":"","what":"Blocking for deduplication","title":"Blocking records for deduplication","text":"Now create new column concatenates information row. next step use newly created column blocking function. specify verbose, get information progress. Results follows: based rnndescent created 156 blocks, based 429 columns (2 character shingles), 93 blocks 2 elements, 38 blocks 3 elements, …, 3 block 6 elements. Structure object follows: result - data.table identifiers block IDs, method - method used, deduplication – whether deduplication applied, metrics - standard metrics based igraph::compare methods comparing graphs (NULL), colnames - column names used comparison, graph – igraph object mainly visualisation. Plot connections  resulting data.table three columns: x – reference dataset (.e. df) – may contain units df, y - query (row df) – may contain units df, block – block ID, dist – distance objects. Create long data.table information blocks units original dataset. add block information final dataset. can check many blocks entities (ent_id) observed. example, entities blocks. can visualise distances units stored df_blocks$result data set. Clearly mixture two groups: matches (close 0) non-matches (close 1).  Finally, can visualise result based information whether block contains matches .","code":"df[, id_count :=.N, ent_id] ## how many times given unit occurs df[is.na(fname_c2), fname_c2:=\"\"] df[is.na(lname_c2), lname_c2:=\"\"] df[, bm:=sprintf(\"%02d\", bm)] ## add leading zeros to month df[, bd:=sprintf(\"%02d\", bd)] ## add leading zeros to month df[, txt:=tolower(paste0(fname_c1,fname_c2,lname_c1,lname_c2,by,bm,bd))] head(df) #>    fname_c1 fname_c2 lname_c1 lname_c2    by     bm     bd rec_id ent_id #>      <char>   <char>   <char>   <char> <int> <char> <char>  <int>  <int> #> 1:  CARSTEN             MEIER           1949     07     22      1     34 #> 2:     GERD             BAUER           1968     07     27      2     51 #> 3:   ROBERT          HARTMANN           1930     04     30      3    115 #> 4:   STEFAN             WOLFF           1957     09     02      4    189 #> 5:     RALF           KRUEGER           1966     01     13      5     72 #> 6:  JUERGEN            FRANKE           1929     07     04      6    142 #>    id_count                    txt #>       <int>                 <char> #> 1:        1   carstenmeier19490722 #> 2:        2      gerdbauer19680727 #> 3:        1 roberthartmann19300430 #> 4:        1    stefanwolff19570902 #> 5:        1    ralfkrueger19660113 #> 6:        1  juergenfranke19290704 set.seed(2024) df_blocks <- blocking(x = df$txt, ann = \"nnd\", verbose = 1, graph = TRUE) #> ===== creating tokens ===== #> ===== starting search (nnd, x, y: 500, 500, t: 429) ===== #> ===== creating graph ===== df_blocks #> ======================================================== #> Blocking based on the nnd method. #> Number of blocks: 156. #> Number of columns used for blocking: 429. #> Reduction ratio: 0.9952. #> ======================================================== #> Distribution of the size of the blocks: #>  2  3  4  5  6  #> 95 34 18  7  2 str(df_blocks,1) #> List of 7 #>  $ result       :Classes 'data.table' and 'data.frame':  255 obs. of  4 variables: #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ method       : chr \"nnd\" #>  $ deduplication: logi TRUE #>  $ metrics      : NULL #>  $ confusion    : NULL #>  $ colnames     : chr [1:429] \"86\" \"ap\" \"av\" \"bf\" ... #>  $ graph        :Class 'igraph'  hidden list of 10 #>  - attr(*, \"class\")= chr \"blocking\" plot(df_blocks$graph, vertex.size=1, vertex.label = NA) head(df_blocks$result) #>        x     y block       dist #>    <int> <int> <num>      <num> #> 1:     2    43     4 0.08074528 #> 2:     2   486     4 0.41023219 #> 3:     5   128    24 0.51333570 #> 4:     7    20     1 0.27246720 #> 5:     7    28     1 0.45405132 #> 6:     9   255    64 0.36754447 df_block_melted <- melt(df_blocks$result, id.vars = c(\"block\", \"dist\")) df_block_melted_rec_block <- unique(df_block_melted[, .(rec_id=value, block)]) head(df_block_melted_rec_block) #>    rec_id block #>     <int> <num> #> 1:      2     4 #> 2:      5    24 #> 3:      7     1 #> 4:      9    64 #> 5:     10    49 #> 6:     11   107 df[df_block_melted_rec_block, on = \"rec_id\", block_id := i.block] head(df) #>    fname_c1 fname_c2 lname_c1 lname_c2    by     bm     bd rec_id ent_id #>      <char>   <char>   <char>   <char> <int> <char> <char>  <int>  <int> #> 1:  CARSTEN             MEIER           1949     07     22      1     34 #> 2:     GERD             BAUER           1968     07     27      2     51 #> 3:   ROBERT          HARTMANN           1930     04     30      3    115 #> 4:   STEFAN             WOLFF           1957     09     02      4    189 #> 5:     RALF           KRUEGER           1966     01     13      5     72 #> 6:  JUERGEN            FRANKE           1929     07     04      6    142 #>    id_count                    txt block_id #>       <int>                 <char>    <num> #> 1:        1   carstenmeier19490722       NA #> 2:        2      gerdbauer19680727        4 #> 3:        1 roberthartmann19300430       NA #> 4:        1    stefanwolff19570902       NA #> 5:        1    ralfkrueger19660113       24 #> 6:        1  juergenfranke19290704       NA df[, .(uniq_blocks = uniqueN(block_id)), .(ent_id)][, .N, uniq_blocks] #>    uniq_blocks     N #>          <int> <int> #> 1:           1   450 hist(df_blocks$result$dist, xlab = \"Distances\", ylab = \"Frequency\", breaks = \"fd\",      main = \"Distances calculated between units\") df_for_density <- copy(df_block_melted[block %in% df$block_id]) df_for_density[, match:= block %in% df[id_count == 2]$block_id]  plot(density(df_for_density[match==FALSE]$dist), col = \"blue\", xlim = c(0, 0.8),       main = \"Distribution of distances between\\nclusters type (match=red, non-match=blue)\") lines(density(df_for_density[match==TRUE]$dist), col = \"red\", xlim = c(0, 0.8))"},{"path":"https://ncn-foreigners.github.io/blocking/articles/v2-reclin.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Blocking records for record linkage","text":"Read required packages","code":"library(blocking) library(reclin2) #> Loading required package: data.table library(data.table) library(rnndescent)"},{"path":"https://ncn-foreigners.github.io/blocking/articles/v2-reclin.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Blocking records for record linkage","text":"Read example data tutorial reclin package URos 2021 Conference. data sets ESSnet Data Integration stated repository: census object 25343 rows 9, cis object 25343 rows 9. Census data CIS data need create new columns concatanates variables pername1 enumpc. first step replace NAs ''.","code":"These totally fictional data sets are supposed to have captured details of persons up to the date 31 December 2011.  Any years of birth captured as 2012 are therefore in error.  Note that in the fictional Census data set, dates of birth between 27 March 2011 and 31 December 2011 are not necessarily in error.  Census: A fictional data set to represent some observations from a         decennial Census CIS: Fictional observations from Customer Information System, which is         combined administrative data from the tax and benefit systems  In the dataset census all records contain a person_id. For some of the records in cis the person_id is also available. This information can be used to evaluate the linkage (assuming these records from the cis are representable  all records in the cis). census <- fread(\"https://raw.githubusercontent.com/djvanderlaan/tutorial-reclin-uros2021/main/data/census.csv\") cis <- fread(\"https://raw.githubusercontent.com/djvanderlaan/tutorial-reclin-uros2021/main/data/cis.csv\") head(census) #>       person_id pername1 pername2    sex dob_day dob_mon dob_year #>          <char>   <char>   <char> <char>   <int>   <int>    <int> #> 1: DE03US001001    COUIE    PRICE      M       1       6     1960 #> 2: DE03US001002    ABBIE    PVICE      F       9      11     1961 #> 3: DE03US001003    LACEY    PRICE      F       7       2     1999 #> 4: DE03US001004   SAMUEL    PRICE      M      13       4     1990 #> 5: DE03US001005   JOSEPH    PRICE      M      20       4     1986 #> 6: DE03US001006     JOSH    PRICE      M      14       2     1996 #>           enumcap enumpc #>            <char> <char> #> 1: 1 WINDSOR ROAD DE03US #> 2: 1 WINDSOR ROAD DE03US #> 3: 1 WINDSOR ROAD DE03US #> 4: 1 WINDSOR ROAD DE03US #> 5: 1 WINDSOR ROAD DE03US #> 6: 1 WINDSOR ROAD DE03US head(cis) #>    person_id pername1 pername2    sex dob_day dob_mon dob_year #>       <char>   <char>   <char> <char>   <int>   <int>    <int> #> 1:      <NA>   HAYDEN     HALL      M      NA       1       NA #> 2:      <NA>    SEREN ANDERSON      F       1       1       NA #> 3:      <NA>    LEWIS    LEWIS      M       1       1       NA #> 4:      <NA> HARRISON   POSTER      M       5       1       NA #> 5:      <NA> MUHAMMED   WATSUN      M       7       1       NA #> 6:      <NA>     RHYS THOMPSON      M       7       1       NA #>               enumcap  enumpc #>                <char>  <char> #> 1:   91 CLARENCE ROAD PO827ER #> 2:     24 CHURCH LANE LS992DB #> 3:     53 CHURCH ROAD  M432ZZ #> 4:  19 HIGHFIELD ROAD  SW75TG #> 5: 17 VICTORIA STREET         #> 6: 1 SPRINGFIELD ROAD SW540RB census[, \":=\"(dob_day=as.character(dob_day), dob_mon=as.character(dob_mon), dob_year=as.character(dob_year))] cis[, \":=\"(dob_day=as.character(dob_day), dob_mon=as.character(dob_mon),dob_year=as.character(dob_year))]  census[is.na(dob_day), dob_day := \"\"] census[is.na(dob_mon), dob_mon := \"\"] census[is.na(dob_year), dob_year := \"\"] cis[is.na(dob_day), dob_day := \"\"] cis[is.na(dob_mon), dob_mon := \"\"] cis[is.na(dob_year), dob_year := \"\"]  census[, txt:=paste0(pername1, pername2, sex, dob_day, dob_mon, dob_year, enumcap, enumpc)] cis[, txt:=paste0(pername1, pername2, sex, dob_day, dob_mon, dob_year, enumcap, enumpc)]"},{"path":[]},{"path":"https://ncn-foreigners.github.io/blocking/articles/v2-reclin.html","id":"using-basic-functionalities-of-blocking-package","dir":"Articles","previous_headings":"Linking datasets","what":"Using basic functionalities of blocking package","title":"Blocking records for record linkage","text":"goal exercise link units CIS dataset CENSUS dataset. Distribution distances pair.  Example pairs. Let’s take look first pair. Obviously typo pername1, variables , appears match.","code":"set.seed(2024) result1 <- blocking(x = census$txt, y = cis$txt, verbose = 1, n_threads = 8) #> ===== creating tokens ===== #> ===== starting search (nnd, x, y: 25343, 24613, t: 1072) ===== #> ===== creating graph ===== hist(result1$result$dist, main = \"Distribution of distances between pairs\", xlab = \"Distances\") head(result1$result, n= 10) #>         x     y block          dist #>     <int> <int> <num>         <num> #>  1:     1  8152  8023  2.941167e-02 #>  2:     2  8584  8447  4.878050e-02 #>  3:     3 20590 19952  1.290381e-02 #>  4:     4 18456 17949  7.158583e-02 #>  5:     5 17257 16815  5.370837e-02 #>  6:     6 19868 19278  5.675775e-02 #>  7:     7 11183 10964 -1.192093e-07 #>  8:    10  9370  9213  8.233702e-02 #>  9:    11  7247  7144  4.881024e-02 #> 10:    12 10622 10424  2.777779e-02 cbind(t(census[1, 1:9]), t(cis[8152, 1:9])) #>           [,1]             [,2]             #> person_id \"DE03US001001\"   NA               #> pername1  \"COUIE\"          \"LOUIE\"          #> pername2  \"PRICE\"          \"PRICE\"          #> sex       \"M\"              \"M\"              #> dob_day   \"1\"              \"1\"              #> dob_mon   \"6\"              \"6\"              #> dob_year  \"1960\"           \"1960\"           #> enumcap   \"1 WINDSOR ROAD\" \"1 WINDSOR ROAD\" #> enumpc    \"DE03US\"         \"DE03US\""},{"path":"https://ncn-foreigners.github.io/blocking/articles/v2-reclin.html","id":"assessing-the-quality","dir":"Articles","previous_headings":"Linking datasets","what":"Assessing the quality","title":"Blocking records for record linkage","text":"records, information correct linkage. can use information evaluate approach, note information evaluating quality described detail vignette. example 971 pairs. Let’s see approach handled problem. seems default parameters NND method result FNR 1.44%. can see increasing number k (thus max_candidates) suggested Nearest Neighbor Descent vignette help. Changing epsilon search parameter 0.1 0.2 decreased FDR 0.5%. Finally, compare NND HNSW algorithm example. seems HNSW algorithm performed better 0.51% FNR.","code":"matches <- merge(x = census[, .(x=1:.N, person_id)],                  y = cis[, .(y = 1:.N, person_id)],                  by = \"person_id\") matches[, block:=1:.N] head(matches) #> Key: <person_id> #>        person_id     x     y block #>           <char> <int> <int> <int> #> 1:  DE03US012003    20 21256     1 #> 2:  DE03US015002    35  9524     2 #> 3:  DE03US019002    44  6754     3 #> 4:  DE03UT043001    81 17312     4 #> 5: DE125LU002001    98 12386     5 #> 6: DE125LU016001   126 11309     6 set.seed(2024) result2 <- blocking(x = census$txt, y = cis$txt, verbose = 1,                     true_blocks = matches[, .(x, y, block)], n_threads = 8) #> ===== creating tokens ===== #> ===== starting search (nnd, x, y: 25343, 24613, t: 1072) ===== #> ===== creating graph ===== result2 #> ======================================================== #> Blocking based on the nnd method. #> Number of blocks: 23789. #> Number of columns used for blocking: 1072. #> Reduction ratio: 1.0000. #> ======================================================== #> Distribution of the size of the blocks: #>     2     3     4     5  #> 22988   779    21     1  #> ======================================================== #> Evaluation metrics (standard): #>      recall   precision         fpr         fnr    accuracy specificity  #>     98.5582     98.5582      0.0007      1.4418     99.9986     99.9993 set.seed(2024) ann_control_pars <- controls_ann() ann_control_pars$nnd$epsilon <- 0.2   result3 <- blocking(x = census$txt, y = cis$txt, verbose = 1,                      true_blocks = matches[, .(x, y, block)], n_threads = 8,                      control_ann = ann_control_pars) #> ===== creating tokens ===== #> ===== starting search (nnd, x, y: 25343, 24613, t: 1072) ===== #> ===== creating graph ===== result3 #> ======================================================== #> Blocking based on the nnd method. #> Number of blocks: 23948. #> Number of columns used for blocking: 1072. #> Reduction ratio: 1.0000. #> ======================================================== #> Distribution of the size of the blocks: #>     2     3     4     5  #> 23299   634    14     1  #> ======================================================== #> Evaluation metrics (standard): #>      recall   precision         fpr         fnr    accuracy specificity  #>     99.4851     99.4851      0.0003      0.5149     99.9995     99.9997 result4 <- blocking(x = census$txt, y = cis$txt, verbose = 1,                      true_blocks = matches[, .(x, y, block)], n_threads = 8,                      ann = \"hnsw\", seed = 2024) #> ===== creating tokens ===== #> ===== starting search (hnsw, x, y: 25343, 24613, t: 1072) ===== #> ===== creating graph ===== result4 #> ======================================================== #> Blocking based on the hnsw method. #> Number of blocks: 23994. #> Number of columns used for blocking: 1072. #> Reduction ratio: 1.0000. #> ======================================================== #> Distribution of the size of the blocks: #>     2     3     4     5  #> 23390   590    13     1  #> ======================================================== #> Evaluation metrics (standard): #>      recall   precision         fpr         fnr    accuracy specificity  #>     99.4851     99.4851      0.0003      0.5149     99.9995     99.9997"},{"path":"https://ncn-foreigners.github.io/blocking/articles/v2-reclin.html","id":"compare-results","dir":"Articles","previous_headings":"Linking datasets","what":"Compare results","title":"Blocking records for record linkage","text":"Finally, can compare results two ANN algorithms. overlap neighbours given ","code":"c(\"no tuning\" = mean(result2$result[order(y)]$x == result4$result[order(y)]$x)*100,   \"with tuning\" = mean(result3$result[order(y)]$x == result4$result[order(y)]$x)*100) #>   no tuning with tuning  #>    99.00865    99.75623"},{"path":"https://ncn-foreigners.github.io/blocking/articles/v3-evaluation.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Evaluation of blocking procedures","text":"","code":"library(blocking)"},{"path":"https://ncn-foreigners.github.io/blocking/articles/v3-evaluation.html","id":"methodology","dir":"Articles","previous_headings":"","what":"Methodology","title":"Evaluation of blocking procedures","text":"package implements following measures assessing quality blocking","code":""},{"path":[]},{"path":"https://ncn-foreigners.github.io/blocking/articles/v4-integration.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Integration with existing packages","text":"","code":"library(blocking) library(reclin2) #> Loading required package: data.table"},{"path":"https://ncn-foreigners.github.io/blocking/articles/v4-integration.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Integration with existing packages","text":"example use dataset Blocking records record linkage vignette.","code":"census <- read.csv(\"https://raw.githubusercontent.com/djvanderlaan/tutorial-reclin-uros2021/main/data/census.csv\") cis <- read.csv(\"https://raw.githubusercontent.com/djvanderlaan/tutorial-reclin-uros2021/main/data/cis.csv\") setDT(census) setDT(cis) census[is.na(dob_day), dob_day := \"\"] #> Warning in `[.data.table`(census, is.na(dob_day), `:=`(dob_day, \"\")): Coercing #> 'character' RHS to 'integer' to match the type of column 5 named 'dob_day'. census[is.na(dob_mon), dob_mon := \"\"] census[is.na(dob_year), dob_year := \"\"] #> Warning in `[.data.table`(census, is.na(dob_year), `:=`(dob_year, \"\")): #> Coercing 'character' RHS to 'integer' to match the type of column 7 named #> 'dob_year'. cis[is.na(dob_day), dob_day := \"\"] #> Warning in `[.data.table`(cis, is.na(dob_day), `:=`(dob_day, \"\")): Coercing #> 'character' RHS to 'integer' to match the type of column 5 named 'dob_day'. cis[is.na(dob_mon), dob_mon := \"\"] cis[is.na(dob_year), dob_year := \"\"] #> Warning in `[.data.table`(cis, is.na(dob_year), `:=`(dob_year, \"\")): Coercing #> 'character' RHS to 'integer' to match the type of column 7 named 'dob_year'. census[, txt:=paste0(pername1, pername2, sex, dob_day, dob_mon, dob_year, enumcap, enumpc)] cis[, txt:=paste0(pername1, pername2, sex, dob_day, dob_mon, dob_year, enumcap, enumpc)] census[, x:=1:.N] cis[, y:=1:.N]"},{"path":"https://ncn-foreigners.github.io/blocking/articles/v4-integration.html","id":"integration-with-the-reclin2-package","dir":"Articles","previous_headings":"","what":"Integration with the reclin2 package","title":"Integration with existing packages","text":"package contains function pair_ann aims integration reclin2 package. function works follows provides information total number pairs. can included pipeline reclin2 package.","code":"pair_ann(x = census[1:1000],           y = cis[1:1000],           on = \"txt\",           deduplication = FALSE) #>   First data set:  1 000 records #>   Second data set: 1 000 records #>   Total number of pairs: 1 000 pairs #>   Blocking on: 'txt' #>  #>          .x    .y block #>       <int> <int> <num> #>    1:   204     1     1 #>    2:   204   176     1 #>    3:   204   375     1 #>    4:   204   391     1 #>    5:   204   405     1 #>   ---                   #>  996:   187   980   498 #>  997:   650   981   499 #>  998:   642   991   500 #>  999:   414   994   501 #> 1000:   733  1000   502 pair_ann(x = census[1:1000],           y = cis[1:1000],           on = \"txt\",           deduplication = FALSE,          ann = \"hnsw\") |>   compare_pairs(on = \"txt\", comparators = list(cmp_jarowinkler())) |>   score_simple(\"score\", on = \"txt\") |>   select_threshold(\"threshold\", score = \"score\", threshold = 0.75) |>   link(selection = \"threshold\") |>    head() #>   Total number of pairs: 6 pairs #>  #> Key: <.y> #>       .y    .x   person_id.x pername1.x pername2.x  sex.x dob_day.x dob_mon.x #>    <int> <int>        <char>     <char>     <char> <char>     <int>     <int> #> 1:    11   945 DE256NG039003    HARRIET    THOMSON      F        12         1 #> 2:    71   427 DE159QA062001      LEWIS      GREEN      M        23         3 #> 3:    83   720 DE237GG025002     IMOGEN      DARIS      F         6         4 #> 4:    99   136 DE125LU022001     DANIEC     MICCER      M        21         4 #> 5:   154   949 DE256NG040002      CHLOE     WILSON      F         5         7 #> 6:   156   549 DE159QY035002        AVA       KING      F         7         7 #>    dob_year.x           enumcap.x enumpc.x #>         <int>              <char>   <char> #> 1:       1995 39 SPRINGFIELD ROAD  DE256NG #> 2:       1973      62 CHURCH ROAD  DE159QA #> 3:       1968   25 WOODLANDS ROAD  DE237GG #> 4:       1947        22 PARK LANE  DE125LU #> 5:       1978 40 SPRINGFIELD ROAD  DE256NG #> 6:       1969      35 CHURCH ROAD  DE159QY #>                                               txt.x     x   person_id.y #>                                              <char> <int>        <char> #> 1: HARRIETTHOMSONF121199539 SPRINGFIELD ROADDE256NG   945          <NA> #> 2:          LEWISGREENM233197362 CHURCH ROADDE159QA   427          <NA> #> 3:       IMOGENDARISF64196825 WOODLANDS ROADDE237GG   720          <NA> #> 4:          DANIECMICCERM214194722 PARK LANEDE125LU   136          <NA> #> 5:     CHLOEWILSONF57197840 SPRINGFIELD ROADDE256NG   949          <NA> #> 6:              AVAKINGF77196935 CHURCH ROADDE159QY   549 DE159QY035002 #>    pername1.y pername2.y  sex.y dob_day.y dob_mon.y dob_year.y #>        <char>     <char> <char>     <int>     <int>      <int> #> 1:    HARRIET    THOMSON      F        12         1         NA #> 2:      LEWIS      GREEN      M        23         3         NA #> 3:     IMOGEW      DAVIS      F         6         4         NA #> 4:     DAMIEL     HILLER      M        21         4         NA #> 5:      CHLOE     WILSOM      F         5         7         NA #> 6:        AVA       KING      F         7         7         NA #>              enumcap.y enumpc.y                                          txt.y #>                 <char>   <char>                                         <char> #> 1: 39 SPRINGFIELD ROAD  DE256NG HARRIETTHOMSONF121NA39 SPRINGFIELD ROADDE256NG #> 2:      62 CHURCH ROAD  DE159QA          LEWISGREENM233NA62 CHURCH ROADDE159QA #> 3:   25 WOODLANDS ROAD  DE237GG       IMOGEWDAVISF64NA25 WOODLANDS ROADDE237GG #> 4:        22 PARK LANE  DE125LU          DAMIELHILLERM214NA22 PARK LANEDE125LU #> 5: 40 SPRINGFIELD ROAD  DE256NG     CHLOEWILSOMF57NA40 SPRINGFIELD ROADDE256NG #> 6:      35 CHURCH ROAD  DE159QY              AVAKINGF77NA35 CHURCH ROADDE159QY #>        y #>    <int> #> 1:    11 #> 2:    71 #> 3:    83 #> 4:    99 #> 5:   154 #> 6:   156"},{"path":"https://ncn-foreigners.github.io/blocking/articles/v4-integration.html","id":"usage-with-fastlink-package","dir":"Articles","previous_headings":"","what":"Usage with fastLink package","title":"Integration with existing packages","text":"Just use block column function fastLink::blockData(). result obtain list records blocked processing.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/articles/v4-integration.html","id":"usage-with-recordlinkage-package","dir":"Articles","previous_headings":"","what":"Usage with RecordLinkage package","title":"Integration with existing packages","text":"Just use block column argument blockfld compare.dedup() compare.linkage() function. Please note block column RecordLinkage package stored character numeric/integer vector.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maciej Beręsewicz. Author, maintainer.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beręsewicz M (2024). blocking: Blocking records record linkage / entity resolution. R package version 0.1.0, https://ncn-foreigners.github.io/blocking/, https://github.com/ncn-foreigners/blocking.","code":"@Manual{,   title = {blocking: Blocking records for record linkage / entity resolution},   author = {Maciej Beręsewicz},   year = {2024},   note = {R package version 0.1.0, https://ncn-foreigners.github.io/blocking/},   url = {https://github.com/ncn-foreigners/blocking}, }"},{"path":[]},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"warning","dir":"","previous_headings":"","what":"Warning!","title":"Blocking records for record linkage / entity resolution","text":"package heavily development API well functionalities may change.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Blocking records for record linkage / entity resolution","text":"R package designed block records data deduplication record linkage (also known entity resolution) using approximate nearest neighbours algorithms (ANN) graphs (via igraph package). supports following R packages bind specific ANN algorithms: rnndescent (default, powerful, supports sparse matrices), RcppHNSW (powerful support sparse matrices), RcppAnnoy, mlpack (see mlpack::lsh mlpack::knn). package can used reclin2 package via blocking::pair_ann function.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Blocking records for record linkage / entity resolution","text":"Work package supported National Science Centre, OPUS 22 grant . 2020/39/B/HS4/00941.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Blocking records for record linkage / entity resolution","text":"Install GitHub blocking package :","code":"# install.packages(\"remotes\") # uncomment if needed remotes::install_github(\"ncn-foreigners/blocking\")"},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Blocking records for record linkage / entity resolution","text":"Load packages examples Generate simple data three groups (df_example) reference data (df_base). Deduplication using blocking function. Output contains information: method used (nnd refers NN descent algorithm), number blocks created (2 blocks), number columns used blocking, .e. many shingles created text2vec package (28), reduction ratio, .e. large reduction comparison pairs (0.5714 means blocking reduces comparison 57%). Table blocking results contains: row numbers original data, block number (integers), distance (ANN algorithm). Deduplication using pair_ann function integration reclin2 package. Use pipeline reclin2 package. Linking records using function df_base “register” df_example reference (data).","code":"library(blocking) library(reclin2) #> Loading required package: data.table df_example <- data.frame(txt = c(   \"jankowalski\",   \"kowalskijan\",   \"kowalskimjan\",   \"kowaljan\",   \"montypython\",   \"pythonmonty\",   \"cyrkmontypython\",   \"monty\" )) df_base <- data.frame(txt = c(\"montypython\", \"kowalskijan\", \"other\"))  df_example #>               txt #> 1     jankowalski #> 2     kowalskijan #> 3    kowalskimjan #> 4        kowaljan #> 5     montypython #> 6     pythonmonty #> 7 cyrkmontypython #> 8           monty  df_base #>           txt #> 1 montypython #> 2 kowalskijan #> 3       other blocking_result <- blocking(x = df_example$txt) blocking_result #> ======================================================== #> Blocking based on the nnd method. #> Number of blocks: 2. #> Number of columns used for blocking: 28. #> Reduction ratio: 0.5714. #> ======================================================== #> Distribution of the size of the blocks: #> 4  #> 2 blocking_result$result #>        x     y block       dist #>    <int> <int> <num>      <num> #> 1:     1     2     1 0.10000002 #> 2:     2     3     1 0.14188367 #> 3:     2     4     1 0.28286284 #> 4:     5     6     2 0.08333331 #> 5:     5     7     2 0.13397455 #> 6:     5     8     2 0.27831215 pair_ann(x = df_example, on = \"txt\") |>   compare_pairs(on = \"txt\", comparators = list(cmp_jarowinkler())) |>   score_simple(\"score\", on = \"txt\") |>   select_threshold(\"threshold\", score = \"score\", threshold = 0.55) |>   link(selection = \"threshold\") #>   Total number of pairs: 8 pairs #>  #> Key: <.y> #>       .y    .x       txt.x           txt.y #>    <int> <int>      <char>          <char> #> 1:     2     1 jankowalski     kowalskijan #> 2:     3     1 jankowalski    kowalskimjan #> 3:     3     2 kowalskijan    kowalskimjan #> 4:     4     1 jankowalski        kowaljan #> 5:     4     2 kowalskijan        kowaljan #> 6:     6     5 montypython     pythonmonty #> 7:     7     5 montypython cyrkmontypython #> 8:     8     5 montypython           monty pair_ann(x = df_base, y = df_example, on = \"txt\", deduplication = FALSE) |>   compare_pairs(on = \"txt\", comparators = list(cmp_jarowinkler())) |>   score_simple(\"score\", on = \"txt\") |>   select_threshold(\"threshold\", score = \"score\", threshold = 0.55) |>   link(selection = \"threshold\") #>   Total number of pairs: 8 pairs #>  #> Key: <.y> #>       .y    .x       txt.x           txt.y #>    <int> <int>      <char>          <char> #> 1:     1     2 kowalskijan     jankowalski #> 2:     2     2 kowalskijan     kowalskijan #> 3:     3     2 kowalskijan    kowalskimjan #> 4:     4     2 kowalskijan        kowaljan #> 5:     5     1 montypython     montypython #> 6:     6     1 montypython     pythonmonty #> 7:     7     1 montypython cyrkmontypython #> 8:     8     1 montypython           monty"},{"path":"https://ncn-foreigners.github.io/blocking/index.html","id":"see-also","dir":"","previous_headings":"","what":"See also","title":"Blocking records for record linkage / entity resolution","text":"See section Data Integration (Statistical Matching Record Linkage) Official Statistics Task View. Packages allow blocking: klsh – k-means locality sensitive hashing, reclin2 – pair_blocking, pari_minsim functions, fastLink – blockData function. : clevr – evaluation clustering, helper functions. exchanger – bayesian Entity Resolution Exchangeable Random Partition Priors","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":null,"dir":"Reference","previous_headings":"","what":"Block records based on text data. — blocking","title":"Block records based on text data. — blocking","text":"Function creates shingles (strings 2 characters, default), applies approximate nearest neighbour (ANN) algorithms via rnndescent, RcppHNSW, RcppAnnoy mlpack packages, creates blocks using graphs via igraph.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block records based on text data. — blocking","text":"","code":"blocking(   x,   y = NULL,   deduplication = TRUE,   on = NULL,   on_blocking = NULL,   ann = c(\"nnd\", \"hnsw\", \"annoy\", \"lsh\", \"kd\"),   distance = c(\"cosine\", \"euclidean\", \"l2\", \"ip\", \"manhatan\", \"hamming\", \"angular\"),   ann_write = NULL,   ann_colnames = NULL,   true_blocks = NULL,   verbose = c(0, 1, 2),   graph = FALSE,   seed = 2023,   n_threads = 1,   control_txt = controls_txt(),   control_ann = controls_ann() )"},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block records based on text data. — blocking","text":"x reference data (character vector matrix), y query data (character vector matrix), provided NULL default thus deduplication performed, deduplication whether deduplication applied (default TRUE y set NULL), variables ANN search (currently supported), on_blocking variables blocking records ANN search (currently supported), ann algorithm used searching ann (possible, c(\"nnd\", \"hnsw\", \"annoy\", \"lsh\", \"kd\"), default \"nnd\" corresponds nearest neighbour descent method), distance distance metric (default cosine, options possible see details), ann_write writing index file. Two files created: 1) index, 2) text file column names, ann_colnames file column names x y indices saved disk (currently supported), true_blocks matrix true blocks calculate evaluation metrics (standard metrics based confusion matrix well metrics igraph::compare() returned). verbose whether log provided (0 = none, 1 = main, 2 = ANN algorithm verbose used), graph whether graph returned (default FALSE), seed seed algorithms (reproducibility), n_threads number threads used ANN algorithms adding data index query, control_txt list controls text data (passed text2vec::itoken_parallel text2vec::itoken), control_ann list controls ANN algorithms.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Block records based on text data. — blocking","text":"Returns list containing: result -- data.table indices (rows) x, y, block distance points method -- name ANN algorithm used, deduplication -- information whether deduplication applied, metrics -- metrics quality assessment, true_blocks provided, colnames -- variable names (colnames) used search, graph -- igraph class object.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Block records based on text data. — blocking","text":"Imports","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Block records based on text data. — blocking","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/blocking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Block records based on text data. — blocking","text":"","code":"## an example using RcppHNSW df_example <- data.frame(txt = c(\"jankowalski\", \"kowalskijan\", \"kowalskimjan\", \"kowaljan\", \"montypython\", \"pythonmonty\", \"cyrkmontypython\", \"monty\"))  result <- blocking(x = df_example$txt,                    ann = \"hnsw\",                    control_ann = controls_ann(hnsw = list(M = 5, ef_c = 10, ef_s = 10)))  result #> ======================================================== #> Blocking based on the hnsw method. #> Number of blocks: 2. #> Number of columns used for blocking: 28. #> Reduction ratio: 0.5714. #> ======================================================== #> Distribution of the size of the blocks: #> 4  #> 2   ## an example using mlpack::lsh  result_lsh <- blocking(x = df_example$txt,                        ann = \"lsh\")  result_lsh #> ======================================================== #> Blocking based on the lsh method. #> Number of blocks: 2. #> Number of columns used for blocking: 28. #> Reduction ratio: 0.5714. #> ======================================================== #> Distribution of the size of the blocks: #> 4  #> 2"},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_ann.html","id":null,"dir":"Reference","previous_headings":"","what":"Controls for approximate nearest neighbours algorithms — controls_ann","title":"Controls for approximate nearest neighbours algorithms — controls_ann","text":"Controls ANN algorithms used package","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_ann.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controls for approximate nearest neighbours algorithms — controls_ann","text":"","code":"controls_ann(   sparse = FALSE,   k_search = 30,   nnd = list(k_build = 30, use_alt_metric = FALSE, init = \"tree\", n_trees = NULL,     leaf_size = NULL, max_tree_depth = 200, margin = \"auto\", n_iters = NULL, delta =     0.001, max_candidates = NULL, low_memory = TRUE, n_search_trees = 1,     pruning_degree_multiplier = 1.5, diversify_prob = 1, weight_by_degree = FALSE,     prune_reverse = FALSE, progress = \"bar\", obs = \"R\", max_search_fraction = 1, epsilon     = 0.1),   hnsw = list(M = 25, ef_c = 200, ef_s = 200, grain_size = 1, byrow = TRUE),   lsh = list(bucket_size = 500, hash_width = 10, num_probes = 0, projections = 10, tables     = 30),   kd = list(algorithm = \"dual_tree\", epsilon = 0, leaf_size = 20, random_basis = FALSE,     rho = 0.7, tau = 0, tree_type = \"kd\"),   annoy = list(n_trees = 250, build_on_disk = FALSE) )"},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_ann.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controls for approximate nearest neighbours algorithms — controls_ann","text":"sparse whether sparse data used input algorithms, k_search number neighbours search, nnd list parameters rnndescent::rnnd_build() rnndescent::rnnd_query(), hnsw list parameters RcppHNSW::hnsw_build() RcppHNSW::hnsw_search(), lsh list parameters mlpack::lsh() function, kd list kd parameters mlpack::knn() function, annoy list parameters RcppAnnoy package.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_ann.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Controls for approximate nearest neighbours algorithms — controls_ann","text":"Returns list parameters","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_ann.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Controls for approximate nearest neighbours algorithms — controls_ann","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"Controls for processing text data — controls_txt","title":"Controls for processing text data — controls_txt","text":"Controls text data used blocking functions, passed tokenizers::tokenize_character_shingles.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controls for processing text data — controls_txt","text":"","code":"controls_txt(   n_shingles = 2L,   n_chunks = 10L,   lowercase = TRUE,   strip_non_alphanum = TRUE )"},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controls for processing text data — controls_txt","text":"n_shingles length shingles (default 2L), n_chunks passed (default 10L), lowercase characters made lowercase? (default TRUE), strip_non_alphanum punctuation white space stripped? (default TRUE).","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_txt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Controls for processing text data — controls_txt","text":"Returns list parameters.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/controls_txt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Controls for processing text data — controls_txt","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_annoy.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","title":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","text":"See details RcppAnnoy package.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_annoy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","text":"","code":"method_annoy(x, y, k, distance, verbose, path, seed, control)"},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_annoy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","text":"x deduplication reference data, y query data, k number neighbours return, distance distance metric, verbose TRUE, log messages console, path path write index, seed seed pseudo-random numbers algorithm, control controls new build methods RcppAnnoy.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_annoy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","text":"Imports","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_annoy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An internal function to use Annoy algorithm via the RcppAnnoy package. — method_annoy","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_hnsw.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function to use HNSW algorithm via the RcppHNSW package. — method_hnsw","title":"An internal function to use HNSW algorithm via the RcppHNSW package. — method_hnsw","text":"See details RcppHNSW::hnsw_build RcppHNSW::hnsw_search.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_hnsw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function to use HNSW algorithm via the RcppHNSW package. — method_hnsw","text":"","code":"method_hnsw(x, y, k, distance, verbose, n_threads, path, control)"},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_hnsw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function to use HNSW algorithm via the RcppHNSW package. — method_hnsw","text":"x deduplication reference data, y query data, k number neighbours return, distance type distance calculate, verbose TRUE, log messages console, n_threads Maximum number threads use, path path write index, control controls HNSW algorithm.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_hnsw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An internal function to use HNSW algorithm via the RcppHNSW package. — method_hnsw","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_mlpack.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function to use the LSH and KD-tree algorithm via the mlpack package. — method_mlpack","title":"An internal function to use the LSH and KD-tree algorithm via the mlpack package. — method_mlpack","text":"See details mlpack::lsh mlpack::knn","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_mlpack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function to use the LSH and KD-tree algorithm via the mlpack package. — method_mlpack","text":"","code":"method_mlpack(x, y, algo = c(\"lsh\", \"kd\"), k, verbose, seed, path, control)"},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_mlpack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function to use the LSH and KD-tree algorithm via the mlpack package. — method_mlpack","text":"x deduplication reference data, y query data, algo algorithm used: lsh kd, k number neighbours return, verbose TRUE, log messages console, seed seed pseudo-random numbers algorithm, path path write index, control controls lsh kd algorithms.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_mlpack.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An internal function to use the LSH and KD-tree algorithm via the mlpack package. — method_mlpack","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_nnd.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function to use the NN descent algorithm via the rnndescent package. — method_nnd","title":"An internal function to use the NN descent algorithm via the rnndescent package. — method_nnd","text":"See details rnndescent::rnnd_build rnndescent::rnnd_query.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_nnd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function to use the NN descent algorithm via the rnndescent package. — method_nnd","text":"","code":"method_nnd(x, y, k, distance, deduplication, verbose, n_threads, control)"},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_nnd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function to use the NN descent algorithm via the rnndescent package. — method_nnd","text":"x deduplication reference data, y query data, k number neighbours return, distance type distance calculate, deduplication whether deduplication applied, verbose TRUE, log messages console, n_threads maximum number threads use, control controls NN descent algorithm.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/method_nnd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An internal function to use the NN descent algorithm via the rnndescent package. — method_nnd","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":null,"dir":"Reference","previous_headings":"","what":"Integration with the reclin2 package — pair_ann","title":"Integration with the reclin2 package — pair_ann","text":"Function integration reclin2 package. function based reclin2::pair_minsim() reuses source code.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integration with the reclin2 package — pair_ann","text":"","code":"pair_ann(   x,   y = NULL,   on,   on_blocking = NULL,   deduplication = TRUE,   keep_block = TRUE,   add_xy = TRUE,   ... )"},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integration with the reclin2 package — pair_ann","text":"x reference data (data.frame data.table), y query data  (data.frame data.table, default NULL), character vector column names ANN search, on_blocking blocking variables (currently supported), deduplication whether deduplication performed (default TRUE), keep_block whether keep block variable set, add_xy whether add x y, ... arguments passed blocking() function.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integration with the reclin2 package — pair_ann","text":"Returns data.table two columns .x .y. Columns .x .y row numbers data.frames x y respectively. Returning data.table also class pairs allows integration reclin2::compare_pairs() package.","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integration with the reclin2 package — pair_ann","text":"Imports","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Integration with the reclin2 package — pair_ann","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/blocking/reference/pair_ann.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integration with the reclin2 package — pair_ann","text":"","code":"# example using two datasets from reclin2  library(reclin2) #> Loading required package: data.table  data(\"linkexample1\", \"linkexample2\", package = \"reclin2\")  linkexample1$txt <- with(linkexample1, tolower(paste0(firstname, lastname, address, sex, postcode))) linkexample1$txt <- gsub(\"\\\\s+\", \"\", linkexample1$txt) linkexample2$txt <- with(linkexample2, tolower(paste0(firstname, lastname, address, sex, postcode))) linkexample2$txt <- gsub(\"\\\\s+\", \"\", linkexample2$txt)  # pairing records from linkexample2 to linkexample1 based on txt column  pair_ann(x = linkexample1, y = linkexample2, on = \"txt\", deduplication = FALSE) |> compare_pairs(on = \"txt\", comparators = list(cmp_jarowinkler())) |> score_simple(\"score\", on = \"txt\") |> select_threshold(\"threshold\", score = \"score\", threshold = 0.75) |> link(selection = \"threshold\") #>   Total number of pairs: 5 pairs #>  #> Key: <.y> #>       .y    .x  id.x lastname.x firstname.x  address.x  sex.x postcode.x #>    <int> <int> <int>     <fctr>      <fctr>     <fctr> <fctr>     <fctr> #> 1:     1     2     2      Smith      George 12 Mainstr      M    1234 AB #> 2:     2     3     3    Johnson        Anna 61 Mainstr      F    1234 AB #> 3:     3     4     4    Johnson     Charles 61 Mainstr      M    1234 AB #> 4:     4     6     6   Schwartz         Ben  1 Eaststr      M    6789 XY #> 5:     5     6     6   Schwartz         Ben  1 Eaststr      M    6789 XY #>                             txt.x  id.y lastname.y firstname.y     address.y #>                            <char> <int>     <fctr>      <fctr>        <fctr> #> 1:    georgesmith12mainstrm1234ab     2      Smith      Gearge 12 Mainstreet #> 2:    annajohnson61mainstrf1234ab     3     Jonson          A. 61 Mainstreet #> 3: charlesjohnson61mainstrm1234ab     4    Johnson     Charles    61 Mainstr #> 4:     benschwartz1eaststrm6789xy     6   Schwartz         Ben        1 Main #> 5:     benschwartz1eaststrm6789xy     7   Schwartz        Anna     1 Eaststr #>     sex.y postcode.y                           txt.y #>    <fctr>     <fctr>                          <char> #> 1:   <NA>    1234 AB geargesmith12mainstreetna1234ab #> 2:      F    1234 AB     a.jonson61mainstreetf1234ab #> 3:      F    1234 AB  charlesjohnson61mainstrf1234ab #> 4:      M    6789 XY         benschwartz1mainm6789xy #> 5:      F    6789 XY     annaschwartz1eaststrf6789xy"},{"path":"https://ncn-foreigners.github.io/blocking/news/index.html","id":"version-010","dir":"Changelog","previous_headings":"","what":"version 0.1.0","title":"version 0.1.0","text":"supports following packages: RcppHNSW, mlpack RcppAnnoy. supports blocking deduplication record linkage. metrics true blocking known based igraph::compare. testing tinytest package. initial support reclin2 package. class blocking introduced. s3method printing. first vignette added. evaluation standard metrics (recall, fpr etc) added, works vector deduplication. added saving index hnsw annoy rnndescend support added.","code":""}]
